---
global:
  # -- Set the entire name definition
  fullnameOverride: eventstream-ejabberd

portRange:
  min: 15000
  max: 16000

controllers:
  main:
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets/CronJobs ignore this.
    strategy: RollingUpdate

    containers:
      main:
        image:
          repository: ghcr.io/processone/ejabberd
          tag: latest
          pullPolicy: IfNotPresent

        # -- Probe configuration
        # -- [[ref]](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
        # @default -- See below
        probes:
          # -- Liveness probe configuration
          # @default -- See below
          liveness:
            # -- Enable the liveness probe
            enabled: false
            # -- Set this to `true` if you wish to specify your own livenessProbe
            custom: false
            # -- sets the probe type when not using a custom probe
            # @default -- "TCP"
            type: TCP
            # -- The spec field contains the values for the default livenessProbe.
            # If you selected `custom: true`, this field holds the definition of the livenessProbe.
            # @default -- See below
            spec:
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3

          # -- Redainess probe configuration
          # @default -- See below
          readiness:
            # -- Enable the readiness probe
            enabled: false
            # -- Set this to `true` if you wish to specify your own readinessProbe
            custom: false
            # -- sets the probe type when not using a custom probe
            # @default -- "TCP"
            type: TCP
            # -- The spec field contains the values for the default readinessProbe.
            # If you selected `custom: true`, this field holds the definition of the readinessProbe.
            # @default -- See below
            spec:
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3

          # -- Startup probe configuration
          # @default -- See below
          startup:
            # -- Enable the startup probe
            enabled: false
            # -- Set this to `true` if you wish to specify your own startupProbe
            custom: false
            # -- sets the probe type when not using a custom probe
            # @default -- "TCP"
            type: TCP
            # -- The spec field contains the values for the default startupProbe.
            # If you selected `custom: true`, this field holds the definition of the startupProbe.
            # @default -- See below
            spec:
              initialDelaySeconds: 0
              timeoutSeconds: 1
              ## This means it has a maximum of 5*30=150 seconds to start up before it fails
              periodSeconds: 5
              failureThreshold: 30

persistence:
  config:
    enabled: true
    type: secret
    name: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-prod-config'
    mountPath: /opt/ejabberd/conf

    advancedMounts:
      main: # the controller with the "main" identifier
        main: # the container with the "main" identifier
          - path: /opt/ejabberd/conf/ejabberd.yml
            readOnly: true
            subPath: ejabberd.yml

  tls:
    enabled: true
    type: secret
    name: myloginspace-default-certificates
    mountPath: /etc/tls

service:
  main:
    # -- Enables or disables the service
    enabled: true

    # -- Configure which controller this service should target
    controller: main

    # -- Make this the primary service for this controller (used in probes, notes, etc...).
    # If there is more than 1 service targeting the controller, make sure that only 1 service is
    # marked as primary.
    primary: true

    # -- Set the service type
    type: ClusterIP

    ports:
      
      mqtts:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port (used in probes, notes, etc...)
        # If there is more than 1 service, make sure that only 1 port is marked as primary.
        primary: true

        # -- The port number
        port: 1883

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: TCP

        # -- Specify the appProtocol value for the Service.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
        appProtocol: secure-mqtt

route:
  main:
    # -- Enables or disables the route
    enabled: true

    # -- Set the route kind
    # Valid options are GRPCRoute, HTTPRoute, TCPRoute, TLSRoute, UDPRoute
    kind: TLSRoute

    # -- Provide additional annotations which may be required.
    annotations: {}

    # -- Provide additional labels which may be required.
    labels:
      wan-mode: 'public'
      lan-mode: 'private'

    hostnames:
      - iot-mqtt.mylogin.space

    # -- Configure the resource the route attaches to.
    parentRefs:
      - # Group of the referent resource.
        group: gateway.networking.k8s.io

        # Kind of the referent resource.
        kind: Gateway

        # Name of the referent resource
        name: main-gw

        sectionName: tls-mqtt

        # Namespace of the referent resource
        namespace: core-prod

    # -- Configure rules for routing. Defaults to the primary service.
    rules:
      - backendRefs:
          - kind: Service
            port: 1883
            name: main
            weight: 1

configMaps:
  config:
    # -- Enables or disables the configMap
    enabled: true
    # -- Labels to add to the configMap
    labels: {}
    # -- Annotations to add to the configMap
    annotations: {}
    # -- configMap data content. Helm template enabled.
    data:
      ejabberd.yml: |
        hosts:{{`
          - broker.mylogin.space

        #
        # AAA
        #

        #
        # Database
        #

        sql_type: pgsql
        sql_server: {{ .psqlHostname }}
        sql_port: {{ .psqlPort }}
        sql_database: {{ .database }}
        sql_username: {{ .username }}
        sql_password: '{{ .password }}'
        new_sql_schema: true
        update_sql_schema: false

        #
        # Authentication
        #

        #
        # LDAP
        #

        ldap_servers:
          - ldap.mylogin.space

        ldap_port: 636

        #
        # LDAP Bind
        #
        
        ldap_rootdn: 'cn={{ .username }},ou=users,dc=ldap,dc=mylogin,dc=space'
        ldap_password: '{{ .password }}'
        ldap_encrypt: tls

        #
        # LDAP Searching
        #
        ldap_base: 'ou=users,dc=ldap,dc=mylogin,dc=space'
        ldap_filter: '(memberOf=cn=MQTT Users,ou=groups,dc=ldap,dc=mylogin,dc=space)'
        ldap_uids: [cn]

        auth_method:
          - ldap

        #
        # Authorization
        #

        acl:
          local:
            user_regexp: ''
          loopback:
            ip:
              - 127.0.0.0/8
              - ::1/128
              - ::FFFF:127.0.0.1/128
          admin:
            user:
              - admin@mq.broker.mylogin.space

        access_rules:
          local:
            allow: local
          c2s:
            deny: blocked
            allow: all
          announce:
            allow: admin
          configure:
            allow: admin
          muc_create:
            allow: local
          pubsub_createnode:
            allow: local
          trusted_network:
            allow: loopback

        api_permissions:
          'console commands':
            from:
              - ejabberd_ctl
            who: all
            what: '*'
          'admin access':
            who:
              access:
                allow:
                  #acl: loopback
                  acl: admin
              oauth:
                scope: 'ejabberd:admin'
                access:
                  allow:
                    #acl: loopback
                    acl: admin
            what:
              - '*'
              - '!stop'
              - '!start'
          'public commands':
            who:
              ip: 127.0.0.1/8
            what:
              - status
              - connected_users_number

        #
        # Auditing
        #

        listen:
          - port: 5222
            ip: '::'
            module: ejabberd_c2s

          - port: 5269
            ip: '::'
            module: ejabberd_s2s_in
            transport: tcp

          - port: 5443
            ip: '::'
            module: ejabberd_http
            tls: true
            request_handlers:
              '/admin': ejabberd_web_admin
              '/api': mod_http_api
              '/bosh': mod_bosh
              '/captcha': ejabberd_captcha
              '/upload': mod_http_upload
              '/ws': ejabberd_http_ws
              '/oauth': ejabberd_oauth

          - port: 1883
            ip: '::'
            module: mod_mqtt
            backlog: 1000
            tls: true

        certfiles:
          - /tls/tls-combined.pem

        language: 'en'

        sm_db_type: redis
        redis_pool_size: 5
        redis_server: redis.mylogin.space
        redis_port: 6379
        redis_db: 120

        modules:
          mod_adhoc: {}
          mod_admin_extra: {}
          mod_announce:
            access: announce
          mod_avatar: {}
          mod_blocking: {}
          mod_bosh: {}
          mod_caps: {}
          mod_carboncopy: {}
          mod_client_state: {}
          mod_configure: {}
          mod_disco: {}
          mod_fail2ban: {}
          mod_http_api: {}
          mod_http_upload:
            put_url: https://@HOST@:5443/upload
          mod_last: {}
          mod_mam:
            ## Mnesia is limited to 2GB, better to use an SQL backend
            ## For small servers SQLite is a good fit and is very easy
            ## to configure. Uncomment this when you have SQL configured:
            ## db_type: sql
            assume_mam_usage: true
            default: never
          mod_mqtt: {}
          mod_muc:
            access:
              - allow
            access_admin:
              - allow: admin
            access_create: muc_create
            access_persistent: muc_create
            access_mam:
              - allow
            default_room_options:
              allow_subscription: true # enable MucSub
              mam: false
          mod_muc_admin: {}
          mod_offline:
            access_max_user_messages: max_user_offline_messages
          mod_ping: {}
          mod_privacy: {}
          mod_private: {}
          mod_proxy65:
            access: local
            max_connections: 5
          mod_pubsub:
            access_createnode: pubsub_createnode
            plugins:
              - flat
              - pep
            force_node_config:
              ## Avoid buggy clients to make their bookmarks public
              storage:bookmarks:
                access_model: whitelist
          mod_push: {}
          mod_push_keepalive: {}
          mod_register:
            ## Only accept registration requests from the "trusted"
            ## network (see access_rules section above).
            ## Think twice before enabling registration from any
            ## address. See the Jabber SPAM Manifesto for details:
            ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
            ip_access: all
          mod_roster:
            versioning: true
          mod_sip: {}
          mod_s2s_dialback:
            access:
              allow:
                server: ejabberd.service.kjdev
              deny: all
          mod_shared_roster: {}
          mod_stream_mgmt:
            resend_on_timeout: if_offline
          mod_vcard: {}
          mod_vcard_xupdate: {}
          mod_version:
            show_os: false`}}
