
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: sso-user

  labels:
    implementation: mixed
    resolvemy.host/env: 'alpha'

  annotations:
    argocd.argoproj.io/sync-wave: '10'

spec:
  compositeTypeRef:
    apiVersion: mylogin.space/v1alpha1
    kind: XUser

  writeConnectionSecretsToNamespace: core-prod
  mode: Pipeline
  pipeline:
    - step: user-base
      functionRef:
        name: {{ .Values.crossplane.functionsRef.gotemplate.name }}
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: | # yaml 
            {{`
            {{ $userCredsWorkspace := "user-creds-ws" }}
            {{ $tfMinio := "tf-minio" }}
            {{ $s3MinioPolicy := "minio-policy" }}
            {{- define "username" -}}
            testing
            {{- end }}
            ---
            apiVersion: tf.upbound.io/v1beta1
            kind: Workspace
            metadata:
              annotations:
                #
                # TODO: Actually make this check status and shit
                gotemplating.fn.crossplane.io/ready: 'True'
                {{ setResourceNameAnnotation $userCredsWorkspace }}

            spec:
              providerConfigRef:
                name: authentik

              writeConnectionSecretToRef:
                name: {{ .observed.composite.resource.metadata.uid }}-sso-secret
                namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}

              forProvider:
                source: Inline
                varmap:
                  ldaps:
                    hostname: ldap.mylogin.space
                    port: 636
                    uri: {{ if eq .observed.composite.resource.spec.ldaps.uri nil }}ldaps://{{ else }}{{ toJson .observed.composite.resource.spec.ldaps.uri }}{{ end }}

                  sips:
                    hostname: sip.resolvemy.host
                    port: 5061
                    uri: sips://

                  psql:
                    hostname: psql-int.mylogin.space
                    port: 5432
                    uri: postgres://

                  mqtts:
                    hostname: mqtt.mylogin.space
                    port: 8443
                    uri: mqtts://
                  
                  mysql:
                    hostname: mysql.mylogin.space
                    port: 3306
                    uri: mysql://

                  mongodb:
                    hostname: mongo.mylogin.space
                    port: 3306
                    uri: mongodb://

                  s3:
                    hostname: s3.mylogin.space
                    port: 443

                  name: {{ .observed.composite.resource.spec.name }}
                  serviceAccount: true
                  groups:
                    - LDAPService
                module: | # hcl
                  resource "random_string" "username" {
                    length  = 10
                    special = false
                    upper = false
                    numeric = false
                  }

                  resource "random_password" "password" {
                    length  = 16
                    lower   = true
                    numeric = true
                    upper   = true
                    special = true
                    override_special = "$-_.+!*(),"
                  }

                  variable "name" {
                    description = "Accounts friendly name"
                    type        = string
                  }

                  variable "username" {
                    description = "Accounts username"
                    type        = string
                    default = null
                    nullable = true
                  }

                  variable "ldaps" {
                    description = "LDAPs Configuration"
                    type        = object({
                      hostname = string
                      port = string
                      uri = string
                    })
                  }

                  variable "mqtts" {
                    description = "MQTTs Configuration"
                    type        = object({
                      hostname = string
                      port = string
                    })
                  }

                  variable "sips" {
                    description = "SIPs Configuration"
                    type        = object({
                      hostname = string
                      port = string
                      uri = string
                    })
                  }

                  variable "psql" {
                    description = "PSQL Configuration"
                    type        = object({
                      hostname = string
                      port = string
                      uri = string
                    })
                  }

                  variable "mysql" {
                    description = "MySQL Configuration"

                    type = object({
                      hostname = string
                      port = string
                      uri = string
                    })
                  }

                  variable "mongodb" {
                    description = "MongoDB Configuration"

                    type = object({
                      hostname = string
                      port = string
                      uri = string
                    })
                  }

                  variable "s3" {
                    description = "S3 Configuration"

                    type = object({
                      hostname = string
                      port = string
                    })
                  }

                  variable "databaseName" {
                    description = "Accounts Database"
                    type        = string
                    default = null
                    nullable = true
                  }

                  variable "bucket" {
                    description = "Accounts S3 Bucket"
                    type        = string
                    nullable = true
                    default = null
                  }

                  variable "groups" {
                    description = "The groups the account should be apart of"

                    type = set(string)
                    default = []
                  }

                  variable "buckets" {
                    description = "The S3 Buckets the account should have access to"

                    type = set(string)

                    nullable = true
                    default = []

                  }

                  variable "serviceAccount" {
                    description = "If the account is a service account or not"
                    
                    type = bool
                    
                    default = true
                  }

                  data "authentik_group" "groups" {
                    for_each = var.groups
                    name = each.key
                  }

                  locals {
                    username = try(length(var.username), 0) > 0 ? var.username : random_string.username.result
                    databaseName = try(length(var.databaseName), 0) > 0 ? var.databaseName : local.username
                    groups = [for group in data.authentik_group.groups : group.id]
                    bucket = try(length(var.bucket), 0) > 0 ? var.bucket : local.username
                    buckets = concat([local.bucket], tolist(var.buckets))
                    password = random_password.password.result
                  }

                  resource "authentik_user" "name" {
                    name = var.name
                    username = local.username

                    password = local.password

                    groups = local.groups

                    type = var.serviceAccount == true ? "service_account" : "internal"
                  }

                  output "username" {
                    value = local.username
                    sensitive = false
                  }

                  output "password" {
                    value = local.password
                    sensitive = true
                  }

                  output "database" {
                    value = local.databaseName
                    sensitive = false
                  }

                  #
                  # LDAP
                  #

                  output "ldapsHostname" {
                    value = var.ldaps.hostname
                    sensitive = false
                  }

                  output "ldapsBIND" {
                    value = "cn=${local.username},ou=users,dc=ldap,dc=mylogin,dc=space"
                    sensitive = false
                  }

                  output "ldapsPort" {
                    value = var.ldaps.port
                    sensitive = false
                  }

                  output "ldapsURI" {
                    value = "${var.ldaps.uri}${var.ldaps.hostname}:${var.ldaps.port}"
                    sensitive = true
                  }

                  #
                  # SIPs
                  #

                  output "sipsHostname" {
                    value = var.sips.hostname
                    sensitive = false
                  }

                  output "sipsPort" {
                    value = var.sips.port
                    sensitive = false
                  }

                  output "sipsURI" {
                    value = "TODO"
                    sensitive = true
                  }

                  #
                  # PSQL
                  #

                  output "psqlHostname" {
                    value = var.psql.hostname
                    sensitive = false
                  }

                  output "psqlPort" {
                    value = var.psql.port
                    sensitive = false
                  }

                  output "psqlURI" {
                    value = "${var.psql.uri}${local.username}:${local.password}@${var.psql.hostname}:${var.psql.port}/${local.databaseName}"
                    sensitive = true
                  }

                  #
                  # MySQL
                  #

                  output "mysqlHostname" {
                    value = var.mysql.hostname
                    sensitive = false
                  }

                  output "mysqlPort" {
                    value = var.mysql.port
                    sensitive = false
                  }

                  output "mysqlURI" {
                    value = "${var.mysql.uri}${local.username}:${local.password}@${var.mysql.hostname}:${var.mysql.port}/${local.databaseName}"
                    sensitive = true
                  }

                  #
                  # S3
                  #

                  output "bucket" {
                    value = local.bucket
                    sensitive = false
                  }

                  output "S3Hostname" {
                    value = var.s3.hostname
                    sensitive = false
                  }

                  output "S3Port" {
                    value = var.s3.port
                    sensitive = false
                  }

                  output "S3URI" {
                    value = "https://${var.s3.hostname}:${var.s3.port}"
                    sensitive = true
                  }

            {{ if and .observed.composite.resource.spec.s3.enabled (ne $.observed.resources nil) }}
            ---
            {{- $tfUserCredsWorkspace := getComposedResource . $userCredsWorkspace }}
            {{ if eq (getResourceCondition "Ready" (index .observed.resources $userCredsWorkspace)).Status "True" }}

            {{- $buckets := list }}
            {{- $createBuckets := list }}

            {{ if ne .observed.composite.resource.spec.s3.createUserBucket false }}
              {{- $buckets = append $buckets $tfUserCredsWorkspace.status.atProvider.outputs.username }}
              {{- $createBuckets = append $createBuckets $tfUserCredsWorkspace.status.atProvider.outputs.username  }}
            {{- end }}

            {{- range $bucketName := .observed.composite.resource.spec.s3.buckets }}
              {{ $buckets = prepend $buckets $bucketName }}

              {{- if ne $.observed.composite.resource.spec.s3.createBuckets false }}
                {{- $createBuckets = append $createBuckets $bucketName }}
              {{- end }}
            {{- end }}

            {{- range $bucketIndex, $bucketName := $createBuckets }}
            apiVersion: minio.crossplane.io/v1
            kind: Bucket
            metadata:
              annotations:
                #
                # TODO: Actually make this check status and shit
                gotemplating.fn.crossplane.io/ready: 'True'
                {{ setResourceNameAnnotation $bucketName }}
            spec:
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.s3.crossplane.crossplaneProvider }}

              forProvider:
                region: {{ $.observed.composite.resource.spec.s3.region }}
                bucketName: {{ $bucketName }}
            ---
            {{- end }}

            {{- $resources := list }}

            {{- range $b := $buckets }}
              {{- $resources = concat $resources (list (printf "arn:aws:s3:::%s" $b) (printf "arn:aws:s3:::%s/*" $b)) }}
            {{- end }}

            {{ $policy := dict
                "Version"  "2012-10-17"
                "Statement" (list (dict
                  "Effect"   "Allow"
                  "Action"   (list "s3:*")
                  "Resource" ($resources | uniq | sortAlpha)
                ))
            }}
            apiVersion: minio.crossplane.io/v1
            kind: Policy
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/ready: 'True'
                crossplane.io/external-name: {{ $tfUserCredsWorkspace.status.atProvider.outputs.username }}
                {{ setResourceNameAnnotation $s3MinioPolicy }}
            spec:
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.s3.crossplane.crossplaneProvider }}

              forProvider:
                rawPolicy: |-
                  {{ toJson $policy }}
            ---
            {{ if eq (getResourceCondition "Ready" (index .observed.resources $s3MinioPolicy)).Status "True" }}
            {{- $minioPolicy := getComposedResource . $s3MinioPolicy }}
            apiVersion: tf.upbound.io/v1beta1
            kind: Workspace
            metadata:
              annotations:
                #
                # TODO: Actually make this check status and shit
                gotemplating.fn.crossplane.io/ready: 'True'
                {{ setResourceNameAnnotation $tfMinio }}

            spec:
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.s3.crossplane.terraformProvider }}

              writeConnectionSecretToRef:
                name: {{ .observed.composite.resource.metadata.uid }}-s3-ldap
                namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}

              forProvider:
                source: Inline
                env:
                  - name: TF_VAR_user_password
                    secretKeyRef:
                      namespace: {{ .observed.composite.resource.spec.writeConnectionSecretToRef.namespace }}
                      name: {{ .observed.composite.resource.spec.writeConnectionSecretToRef.name }}
                      key: password
                varmap:
                  username: '{{ ( index $.observed.resources $userCredsWorkspace ).connectionDetails.username | b64dec }}'
                  ldap:
                    user: '{{ ( index $.observed.resources $userCredsWorkspace ).connectionDetails.ldapsBIND | b64dec }}'
                  
                  policy:
                    name: '{{ $minioPolicy.metadata.name }}'
                module: | # hcl
                  variable "ldap" {
                    description = "LDAP Configuration"
                    type = object(
                      {
                        user = string
                      }
                    )
                  }

                  variable "username" {
                    description = "LDAP Configuration"
                    type = string
                  }

                  variable "user_password" {
                    description = "LDAP Configuration"
                    type = string
                  }


                  variable "policy" {
                    description = "LDAP/SSO Username Policy"
                    type = object(
                      {
                        name = string
                      }
                    )
                  }

                  resource "minio_iam_ldap_user_policy_attachment" "user" {
                    user_dn = var.ldap.user
                    policy_name = var.policy.name
                  }

                  {{- if .observed.composite.resource.spec.s3.createCredentials }}

                  data "http" "ldap_login" {
                    url    = "https://${local.S3_ENDPOINT}/?Action=AssumeRoleWithLDAPIdentity&Version=2011-06-15&LDAPUsername=${var.username}&LDAPPassword=${var.user_password}"
                    method = "POST"

                    request_headers = {
                      Content-Type = "application/x-www-form-urlencoded"
                    }

                    # optional: skip TLS verification if using self-signed
                    # insecure = true
                  }

                  resource "terraform_data" "body" {
                    input = data.http.ldap_login.response_body

                    triggers_replace = [
                      var.username,
                      var.user_password
                    ]
                  }

                  output "AccessKey" {
                    value = regex("<AccessKeyId>(.*?)</AccessKeyId>", terraform_data.body.output)[0]

                    sensitive = true
                  }

                  output "SecretAccessKey" {
                    value = regex("<SecretAccessKey>(.*?)</SecretAccessKey>", terraform_data.body.output)[0]

                    sensitive = true
                  }

                  output "Expiry" {
                    value = regex("<Expiration>(.*?)</Expiration>", terraform_data.body.output)[0]
                  }
                  {{- end }}
            
            {{- end }}
            {{- end }}
            {{- end }}
            ---
            apiVersion: meta.gotemplating.fn.crossplane.io/v1alpha1
            kind: CompositeConnectionDetails
            {{ if eq $.observed.resources nil }}
            data: {}
            {{ else }}
            data:
              username: {{ ( index $.observed.resources $userCredsWorkspace ).connectionDetails.username }}
              password: {{ ( index $.observed.resources $userCredsWorkspace ).connectionDetails.password }}
              ldapsBIND: {{ ( index $.observed.resources $userCredsWorkspace ).connectionDetails.ldapsBIND }}
              ldapsURI: {{ ( index $.observed.resources $userCredsWorkspace ).connectionDetails.ldapsURI }}
            {{ end }}
            `}}