providers:
  talos:
    bootstrap:
      version: v0.6.7

    cntrlplane:
      version: v0.5.8



tenant:
  version: &version 'v1alpha1'

  group: mylogin.space

  kind: Tenant

cluster:
  version: *version

  group: resolvemy.host

  kind: Cluster

clusterNodes:
  version: 'v1alpha1'

  group: resolvemy.host

  kind: ClusterNode

crossplane:
  clusters:
    registry:
      mirror:
        base: https://registry.writemy.codes/v2

        paths:
          docker.io: proxy-docker.io
          
          ghcr.io: proxy-ghcr.io

          gcr.io: proxy-gcr.io

          registry.k8s.io: proxy-registry.k8s.io
  functionsRef:
    gotemplate:
      name: function-go-templating



tinkerbell:
  ip: '10.1.1.66'

kamaji:
  # Default values for kamaji.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  # -- The number of the pod replicas for the Kamaji controller.
  replicaCount: 1


  # -- A list of extra arguments to add to the kamaji controller default ones
  extraArgs: []

  serviceMonitor:
    # -- Toggle the ServiceMonitor true if you have Prometheus Operator installed and configured
    enabled: true

  etcd:
    # -- Install an etcd with enabled multi-tenancy along with Kamaji
    deploy: false


  # -- The annotations to apply to the Kamaji controller pods.
  podAnnotations: {}

  # -- The securityContext to apply to the Kamaji controller pods.
  podSecurityContext:
    runAsNonRoot: true

  # -- The securityContext to apply to the Kamaji controller container only. It does not apply to the Kamaji RBAC proxy container.
  securityContext:
    allowPrivilegeEscalation: false
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 16m
      memory: 20Mi

  # -- Kubernetes node selector rules to schedule Kamaji controller
  nodeSelector: {}

  # -- Kubernetes node taints that the Kamaji controller pods would tolerate
  tolerations: []

  # -- Kubernetes affinity rules to apply to Kamaji controller pods
  affinity: {}

  # -- Directory which will be used to work with temporary files. (default "/tmp/kamaji")
  temporaryDirectoryPath: "/tmp/kamaji"

  loggingDevel:
    # -- (string) Development Mode defaults(encoder=consoleEncoder,logLevel=Debug,stackTraceLevel=Warn). Production Mode defaults(encoder=jsonEncoder,logLevel=Info,stackTraceLevel=Error) (default false)
    enable: false

  datastore:
    # -- (bool) Enable the Kamaji Datastore creation (default=true)
    enabled: true

    # -- (string) The Kamaji Datastore driver, supported: etcd, MySQL, PostgreSQL (defaults=etcd).
    driver: PostgreSQL
    # -- (array) List of endpoints of the selected Datastore. When letting the Chart install the etcd datastore, this field is populated automatically.
    endpoints: ['psql.mylogin.space:5432']

    basicAuth:
      usernameSecret:
        # -- The Secret key where the data is stored.
        keyPath: username

      passwordSecret:
        # -- The Secret key where the data is stored.
        keyPath: POSTGRES_PASSWORD

    tlsConfig:
      certificateAuthority:
        certificate:
          # -- Name of the Secret containing the CA required to establish the mandatory SSL/TLS connection to the datastore.
          name: myloginspace-default-certificates
          # -- Namespace of the Secret containing the CA required to establish the mandatory SSL/TLS connection to the datastore.
          namespace: core-prod
          # -- Key of the Secret which contains the content of the certificate.
          keyPath: tls.crt

        privateKey:
          # -- Name of the Secret containing the CA private key required to establish the mandatory SSL/TLS connection to the datastore.
          name: myloginspace-default-certificates
          # -- Namespace of the Secret containing the CA private key required to establish the mandatory SSL/TLS connection to the datastore.
          namespace: core-prod
          # -- Key of the Secret which contains the content of the private key.
          keyPath: tls.key

      clientCertificate:
        certificate:
          # -- Name of the Secret containing the client certificate required to establish the mandatory SSL/TLS connection to the datastore.
          name: myloginspace-default-certificates
          # -- Namespace of the Secret containing the client certificate required to establish the mandatory SSL/TLS connection to the datastore.
          namespace: core-prod
          # -- Key of the Secret which contains the content of the certificate.
          keyPath: tls.crt

        privateKey:
          # -- Name of the Secret containing the client certificate private key required to establish the mandatory SSL/TLS connection to the datastore.
          name: myloginspace-default-certificates
          # -- Namespace of the Secret containing the client certificate private key required to establish the mandatory SSL/TLS connection to the datastore.
          namespace: core-prod
          # -- Key of the Secret which contains the content of the private key.
          keyPath: tls.key

cluster-api-operator:
  # Cert Manager options
  # Full list of supported values is available at https://artifacthub.io/packages/helm/cert-manager/cert-manager
  cert-manager:
    enabled: false

  # ---
  # Cluster API provider options
  core: ""
  bootstrap: ""
  controlPlane: ""
  infrastructure: ""
  addon: ""
  # ---
  # Common configuration secret options
  configSecret: {}
  # ---
  # CAPI operator deployment options
  logLevel: 2
  replicaCount: 1

  leaderElection:
    enabled: false

  imagePullSecrets: {}
  resources:
    manager:
      limits:
        cpu: 100m
        memory: 500M
      requests:
        cpu: 16m
        memory: 100Mi
  containerSecurityContext: {}
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                  - amd64
                  - arm64
                  - ppc64le
              - key: kubernetes.io/os
                operator: In
                values:
                  - linux

  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane

  volumes:
    - name: cert
      secret:
        defaultMode: 420
        secretName: capi-operator-webhook-service-cert
  volumeMounts:
    manager:
      - mountPath: /tmp/k8s-webhook-server/serving-certs
        name: cert
        readOnly: true
