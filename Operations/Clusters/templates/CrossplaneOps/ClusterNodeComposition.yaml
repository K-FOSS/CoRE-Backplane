apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cluster-node

  labels:
    implementation: mixed
    resolvemy.host/env: 'alpha'

  annotations:
    argocd.argoproj.io/sync-wave: '10'

spec:
  compositeTypeRef:
    apiVersion: {{ .Values.clusterNodes.group }}/{{ .Values.clusterNodes.version }}
    kind: X{{ .Values.clusterNodes.kind }}

  writeConnectionSecretsToNamespace: core-prod
  mode: Pipeline
  pipeline:
    - step: clusternode-base
      functionRef:
        name: {{ .Values.crossplane.functionsRef.gotemplate.name }}
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: | # yaml {{`
            {{ $tfTalosImageName := "tf-talos-factory" }}
            {{ $clusterCustomResourceName := "custom-cluster" }}
            {{ $tinkHardwareResourceName := "tink-hardware" }}
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $clusterCustomResourceName }}
            spec:
              providerConfigRef:
                name: local-k8s

              managementPolicies:
                - Observe

              forProvider:
                manifest:
                  apiVersion: {{ .observed.composite.resource.spec.clusterRef.group }}`}}/{{ .Values.cluster.version }}{{`
                  kind: {{ .observed.composite.resource.spec.clusterRef.kind }}
                  metadata:
                    # name in manifest is optional and defaults to Object name
                    name: {{ .observed.composite.resource.spec.clusterRef.name }}
                    namespace: {{ .observed.composite.resource.spec.clusterRef.namespace }}
            ---
            apiVersion: tf.upbound.io/v1beta1
            kind: Workspace
            metadata:
              annotations:
                {{ setResourceNameAnnotation $tfTalosImageName }}

            spec:
              providerConfigRef:
                name: tf-talos

              forProvider:
                source: Inline
                varmap:
                  ipAddresses: 
                    {{ range .observed.composite.resource.spec.networks }}
                    - {{ .ipAddress }}

                    {{ end }}
                  talos:
                    version: 'v1.9.4'
                module: | # hcl
                  variable "talos" {
                    description = "Talos Configuration"
                    type = object(
                      {
                        version = string
                      }
                    )
                  }

                  variable "ipAddresses" {
                    description = "IP Address Configuration"
                    type = set(string)
                  }

                  data "talos_image_factory_extensions_versions" "this" {
                    # get the latest talos version
                    talos_version = var.talos.version
                    filters = {
                      names = [
                        "bnx2-bnx2x",
                        "drbd",
                        "iscsi-tools",
                        "util-linux-tools",
                        "zfs"
                      ] 
                    }
                  }

                  resource "talos_image_factory_schematic" "this" {
                    schematic = yamlencode(
                      {
                        customization = {
                          systemExtensions = {
                            officialExtensions = data.talos_image_factory_extensions_versions.this.extensions_info.*.name
                          }
                        }
                      }
                    )
                  }
              
                  output "schematic_id" {
                    value = talos_image_factory_schematic.this.id
                  }

                  output "subnetmask" {
                    value = flatten([for ipAddress in var.ipAddresses : [cidrnetmask(ipAddress)]])
                  }
            ---
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $tinkHardwareResourceName }}
            spec:
              providerConfigRef:
                name: local-k8s

              managementPolicies:
                - Observe
                - Create

              forProvider:
                manifest:
                  {{ $talosImageFactory := getComposedResource . $tfTalosImageName }}
                  {{ $clusterCustomResource := getComposedResource . $clusterCustomResourceName }}
                  apiVersion: tinkerbell.org/v1alpha1
                  kind: Hardware
                  metadata:
                    name: {{ .observed.composite.resource.spec.claimRef.name }}
                    namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}

                    labels:
                      manufacturer: dell
                      idrac-version: '6'
                      resolvemy.host/dc: '1'
                      resolvemy.host/rack: '1'
                      resolvemy.host/nodetype: infra
                      pool: 'test'

                  spec:
                    metadata:
                      facility:
                        facility_code: onprem

                      manufacturer:
                        slug: dell

                      instance:
                        hostname: {{ .observed.composite.resource.spec.claimRef.name }}
                    disks:
                      - device: /dev/sda

                    interfaces:
                      {{ range $index, $network := .observed.composite.resource.spec.networks }}
                      - dhcp:
                          arch: x86_64
                          hostname: {{ $.observed.composite.resource.spec.claimRef.name }}
                          ip:
                            address: {{ $network.ipAddress }}
                            gateway: {{ $network.gateway }}
                            netmask: {{ index $talosImageFactory.status.atProvider.outputs.subnetmask $index }}

                          lease_time: 86400
                          mac: {{ $network.macAddress }}

                          name_servers:
                            {{ range $dnsServer := $network.dns }}
                            - {{ $dnsServer }}
                            {{ end }}

                        disableDhcp: false
                        netboot:
                          allowPXE: true
                          allowWorkflow: false
                          ipxe:
                            contents: | # shell
                              #!ipxe

                              imgfree
                              kernel https://pxe.factory.talos.dev/image/{{ $talosImageFactory.status.atProvider.outputs.schematic_id }}/{{ $clusterCustomResource.spec.versions.talos }}/kernel-amd64 talos.platform=metal ip={{ $network.ipAddress }}::{{ $network.gateway }}:{{ index $talosImageFactory.status.atProvider.outputs.subnetmask $index }}:{{ $.observed.composite.resource.spec.claimRef.name }}:eno1:off::: init_on_alloc=1 slab_nomerge pti=on consoleblank=0 nvme_core.io_timeout=4294967295 printk.devkmsg=on talos.device.settle_time=2m talos.logging.kernel=udp://10.1.1.14:6050/ talos.config=http://10.1.1.66:50061/2009-04-04/user-data
                              initrd https://pxe.factory.talos.dev/image/{{ $talosImageFactory.status.atProvider.outputs.schematic_id }}/{{ $clusterCustomResource.spec.versions.talos }}/initramfs-amd64.xz
                              boot
                      {{ end }}
                `}}