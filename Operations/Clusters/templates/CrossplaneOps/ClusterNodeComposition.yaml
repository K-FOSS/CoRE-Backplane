apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cluster-node

  labels:
    implementation: mixed
    resolvemy.host/env: 'alpha'

  annotations:
    argocd.argoproj.io/sync-wave: '10'

spec:
  compositeTypeRef:
    apiVersion: {{ .Values.clusterNodes.group }}/{{ .Values.clusterNodes.version }}
    kind: X{{ .Values.clusterNodes.kind }}

  writeConnectionSecretsToNamespace: core-prod
  mode: Pipeline
  pipeline:
    - step: clusternode-base
      functionRef:
        name: {{ .Values.crossplane.functionsRef.gotemplate.name }}
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: | # yaml 
            {{`
            {{ $tfTalosImageName := "tf-talos-factory" }}
            {{ $clusterCustomResourceName := "custom-cluster" }}
            {{ $tinkHardwareResourceName := "tink-hardware" }}
            {{ $tinkMachineResourceName := "tink-workmachine" }}
            {{ $ciliumBGPResourceName := "cilium-bgp" }}
            {{ $talosTFTest := "talos-tf-test" }}
            {{ $targetClusterNodeResourceName := "cluster-k8s-node" }}
            ---
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $clusterCustomResourceName }}
            spec:
              providerConfigRef:
                name: local-k8s

              managementPolicies:
                - Observe

              readiness:
                policy: SuccessfulCreate

              forProvider:
                manifest:
                  apiVersion: {{ .observed.composite.resource.spec.clusterRef.group }}`}}/{{ .Values.cluster.version }}{{`
                  kind: {{ .observed.composite.resource.spec.clusterRef.kind }}
                  metadata:
                    # name in manifest is optional and defaults to Object name
                    name: {{ .observed.composite.resource.spec.clusterRef.name }}
                    namespace: {{ .observed.composite.resource.spec.clusterRef.namespace }}
            ---
            {{ $clusterCustomResource := getComposedResource . $clusterCustomResourceName }}
            {{ if $clusterCustomResource.status.atProvider }}
            apiVersion: tf.upbound.io/v1beta1
            kind: Workspace
            metadata:
              annotations:
                {{ setResourceNameAnnotation $tfTalosImageName }}

            spec:
              providerConfigRef:
                name: tf-talos

              forProvider:
                source: Inline
                varmap:
                  ipAddresses: 
                    {{ range .observed.composite.resource.spec.networks }}
                    - {{ .ipAddress }}
                    {{ end }}
                  talos:
                    version: {{ $clusterCustomResource.status.atProvider.manifest.spec.versions.talos }}
                module: | # hcl
                  variable "talos" {
                    description = "Talos Configuration"
                    type = object(
                      {
                        version = string
                      }
                    )
                  }

                  variable "ipAddresses" {
                    description = "IP Address Configuration"
                    type = set(string)
                  }

                  data "talos_image_factory_extensions_versions" "this" {
                    # get the latest talos version
                    talos_version = var.talos.version
                    filters = {
                      names = [
                        "bnx2-bnx2x",
                        "drbd",
                        "iscsi-tools",
                        "util-linux-tools"
                      ] 
                    }
                  }

                  resource "talos_image_factory_schematic" "this" {
                    schematic = yamlencode(
                      {
                        customization = {
                          systemExtensions = {
                            officialExtensions = data.talos_image_factory_extensions_versions.this.extensions_info.*.name
                          }
                        }
                      }
                    )
                  }
              
                  output "schematic_id" {
                    value = talos_image_factory_schematic.this.id
                  }

                  output "subnetmask" {
                    value = flatten([for ipAddress in var.ipAddresses : [cidrnetmask(ipAddress)]])
                  }
            {{ end }} 
            ---
            {{ $talosImageFactory := getComposedResource . $tfTalosImageName }}
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $tinkHardwareResourceName }}
            spec:
              providerConfigRef:
                name: local-k8s

              managementPolicies:
                - Observe
                - Create
                - Update


              readiness:
                policy: SuccessfulCreate

              forProvider:
                manifest:
                  apiVersion: tinkerbell.org/v1alpha1
                  kind: Hardware
                  metadata:
                    name: {{ .observed.composite.resource.spec.claimRef.name }}
                    namespace: core-prod

                    labels:
                      resolvemy.host/nodetype: {{ $clusterCustomResource.status.atProvider.manifest.spec.clustertype }}
                      cluster.x-k8s.io/cluster-name: {{ $clusterCustomResource.status.atProvider.manifest.metadata.name }}

                    ownerReferences:
                      - apiVersion: {{ $clusterCustomResource.status.atProvider.manifest.apiVersion }}
                        kind: {{ $clusterCustomResource.status.atProvider.manifest.kind }}
                        name: {{ $clusterCustomResource.status.atProvider.manifest.metadata.name }}
                        uid: {{ $clusterCustomResource.status.atProvider.manifest.metadata.uid }}

                  spec:
                    metadata:
                      instance:
                        hostname: {{ .observed.composite.resource.spec.claimRef.name }}
                        id: {{ (index .observed.composite.resource.spec.networks 0).macAddress }}
                    disks:
                      - device: /dev/sda

                    interfaces:
                      {{ range $index, $network := .observed.composite.resource.spec.networks }}
                      {{ $ipAddress := regexReplaceAll "(.*)/[1-3][0-9]" $network.ipAddress "${1}" }}
                      - dhcp:
                          arch: x86_64
                          hostname: {{ $.observed.composite.resource.spec.claimRef.name }}
                          ip:
                            address: {{ $ipAddress }}
                            gateway: {{ $network.gateway }}
                            netmask: {{ index $talosImageFactory.status.atProvider.outputs.subnetmask $index }}

                          lease_time: 86400
                          mac: {{ $network.macAddress }}

                          name_servers:
                            {{ range $dnsServer := $network.dns }}
                            - {{ $dnsServer }}
                            {{ end }}

                        disableDhcp: false
                        netboot:
                          {{ $tinkMachineResource := getComposedResource $ $tinkMachineResourceName }}
                          {{ if eq $tinkMachineResource.status.atProvider.manifest.status.ready true }}
                          allowPXE: {{ $tinkMachineResource.status.atProvider.manifest.status.ready }}
                          allowWorkflow: false
                          ipxe:
                            contents: | # shell
                              #!ipxe

                              imgfree
                              kernel https://pxe.factory.talos.dev/image/{{ $talosImageFactory.status.atProvider.outputs.schematic_id }}/{{ $clusterCustomResource.status.atProvider.manifest.spec.versions.talos }}/kernel-amd64 reboot=hard talos.platform=metal ip={{ $ipAddress }}::{{ $network.gateway }}:{{ index $talosImageFactory.status.atProvider.outputs.subnetmask $index }}:{{ $.observed.composite.resource.spec.claimRef.name }}:eno1:off::: init_on_alloc=1 slab_nomerge pti=on consoleblank=0 nvme_core.io_timeout=4294967295 printk.devkmsg=on talos.device.settle_time=2m talos.logging.kernel=udp://10.1.1.14:6050/ talos.config=http://10.1.1.66:50061/2009-04-04/user-data
                              initrd https://pxe.factory.talos.dev/image/{{ $talosImageFactory.status.atProvider.outputs.schematic_id }}/{{ $clusterCustomResource.status.atProvider.manifest.spec.versions.talos }}/initramfs-amd64.xz
                              boot
                          {{ else }}
                          allowPXE: true
                          allowWorkflow: true
                          {{ end }}

                      {{ end }}
            ---
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $targetClusterNodeResourceName }}
            spec:
              providerConfigRef:
                name: {{ $clusterCustomResource.status.atProvider.manifest.metadata.name }}-{{ $clusterCustomResource.status.atProvider.manifest.spec.environment }}-provider

              managementPolicies:
                - Observe
                - Update

              forProvider:
                manifest:
                  apiVersion: v1
                  kind: Node
                  metadata:
                    name: {{ (split "." .observed.composite.resource.spec.claimRef.name)._0 }}

                    labels:
                      topology.kubernetes.io/region: '{{ $clusterCustomResource.status.atProvider.manifest.spec.metadata.region }}'
                      topology.kubernetes.io/zone: '{{ $clusterCustomResource.status.atProvider.manifest.spec.metadata.region }}-{{ $clusterCustomResource.status.atProvider.manifest.spec.metadata.datacenter }}'
                  spec:
                    providerID: tinkerbell://core-prod/{{ .observed.composite.resource.spec.claimRef.name }}
            ---
            {{ if .observed.composite.resource.spec.bgp.instances }}
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $ciliumBGPResourceName }}
            spec:
              providerConfigRef:
                name: {{ $clusterCustomResource.status.atProvider.manifest.metadata.name }}-{{ $clusterCustomResource.status.atProvider.manifest.spec.environment }}-provider

              managementPolicies:
                - Observe
                - Update

              forProvider:
                manifest:
                  apiVersion: cilium.io/v2alpha1
                  kind: CiliumBGPNodeConfig
                  metadata:
                    name: {{ (split "." .observed.composite.resource.spec.claimRef.name)._0 }}
                  spec:
                    bgpInstances:
                      {{ $bgpInstances := concat .observed.composite.resource.spec.bgp.instances $clusterCustomResource.status.atProvider.manifest.spec.bgp.instances  }}
                      {{ range $index, $bgpInstance := $bgpInstances }}
                      - localASN: {{ $bgpInstance.asn }}
                        name: {{ $bgpInstance.name }}
                        peers:
                          {{ range $peerIndex, $peer := $bgpInstance.peers }}
                          - name: {{ $peer.name }}
                            peerASN: {{ $peer.asn }}
                            peerAddress: {{ $peer.address }}
                            peerConfigRef:
                              group: cilium.io
                              kind: CiliumBGPPeerConfig
                              name: default
                          {{ end }}
                      {{ end }}
            {{ end }}   
            ---
            {{ $talosHardware := getComposedResource . $tinkHardwareResourceName }}
            {{ $tinkMachineName := index $talosHardware.status.atProvider.manifest.metadata.labels "v1alpha1.tinkerbell.org/ownerName" }}
            {{ if $tinkMachineName }}
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $tinkMachineResourceName }}
            spec:
              providerConfigRef:
                name: local-k8s

              managementPolicies:
                - Observe

              forProvider:
                manifest:
                  apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
                  kind: TinkerbellMachine
                  metadata:
                    name: {{ $tinkMachineName }}
                    namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}
            {{ end }}
            ---
            apiVersion: tf.upbound.io/v1beta1
            kind: Workspace
            metadata:
              annotations:
                {{ setResourceNameAnnotation $talosTFTest }}

            spec:
              providerConfigRef:
                name:  tf-talos-{{ $clusterCustomResource.status.atProvider.manifest.metadata.name }}-provider

              forProvider:
                source: Inline
                varmap:
                  nodeIP: {{ (index (getComposedResource . $tinkMachineResourceName).status.atProvider.manifest.status.addresses 0).address }}
                module: | # hcl
                  variable "talosConfig" {
                    description = "Talos Config"
                    type        = string
                  }

                  variable "nodeIP" {
                    description = "Talos Node IP Address"
                    type        = string
                  }

                  resource "talos_machine_configuration_apply" "node-apply" {
                    client_configuration = file("${path.module}/talos-config")
                    machine_configuration_input = var.talosConfig
                    node = var.nodeIP
                    endpoint = var.nodeIP
                    config_patches = [
                      yamlencode({
                        machine = {
                          install = {
                            type = "ssd"
                          }
                        }
                      })
                    ]
                  }
            `}}
                  
                
                # TODO Get this setup in order to programatically test if cluster has been deployed already and set first boot mode automatically, perhaps take advantage of go templates conditional alongside adding and updating statuses 