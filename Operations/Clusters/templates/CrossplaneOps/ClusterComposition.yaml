apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cluster-init

  labels:
    implementation: mixed
    resolvemy.host/env: 'alpha'

  annotations:
    argocd.argoproj.io/sync-wave: '10'

spec:
  compositeTypeRef:
    apiVersion: resolvemy.host/v1alpha1
    kind: XCluster

  writeConnectionSecretsToNamespace: core-prod
  mode: Pipeline
  pipeline:
    - step: cluster-base
      functionRef:
        name: {{ .Values.crossplane.functionsRef.gotemplate.name }}
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: | # yaml
            {{`{{ $xr := getCompositeResource . }}
            {{ $clusterResourceName := "cluster" }}
            {{ $tinkclusterResourceName := "tinkcluster" }}
            {{ $talosCNTRLPlaneResourceName := "taloscntrlplane" }}
            {{ $tinkTemplateResourceName := "tinktemplate" }}
            {{ $clusterResource := "cluster" }}
            {{ $networks := $xr.spec.networks }}

            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $tinkclusterResourceName }}
            spec:
              providerConfigRef:
                name: local-k8s

              readiness:
                policy: SuccessfulCreate

              forProvider:
                manifest:
                  apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
                  kind: TinkerbellCluster
                  metadata:
                    namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}
                  spec:
                    controlPlaneEndpoint:
                      host: {{ .observed.composite.resource.spec.controlplane.ipAddress }}
                      port: 6443
                    imageLookupBaseRegistry: 'ghcr.io/tinkerbell/cluster-api-provider-tinkerbell'
            ---
            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $tinkTemplateResourceName }}
            spec:
              providerConfigRef:
                name: local-k8s

              readiness:
                policy: SuccessfulCreate

              forProvider:
                manifest:
                  apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
                  kind: TinkerbellMachineTemplate
                  metadata:
                    namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}
                  spec:
                    template:
                      spec:
                        hardwareAffinity:
                          preferred:
                            - weight: 100
                              hardwareAffinityTerm:
                                labelSelector:
                                  matchLabels:
                                    resolvemy.host/nodetype: infra
                                    cluster.x-k8s.io/cluster-name: {{ .observed.composite.resource.spec.claimRef.name }}
                        templateOverride: | # yaml
                          version: "0.1"
                          name: kub-poc-control-plane-flatcar-arm64
                          global_timeout: 6000
                          tasks:
                            - name: "kub-poc-control-plane-flatcar"
                              worker: "{{.device_1}}"
                              volumes:
                                - /dev:/dev
                                - /dev/console:/dev/console
                                - /lib/firmware:/lib/firmware:ro
                                - /run:/run
                              actions:
                                - name: hello-world
                                  image: docker.io/hello-world
                                  timeout: 1800

            ---
            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $talosCNTRLPlaneResourceName }}
            spec:
              providerConfigRef:
                name: local-k8s

              readiness:
                policy: SuccessfulCreate

              forProvider:
                manifest:
                  {{ $tinkTemplate := getComposedResource . $tinkTemplateResourceName }}
                  apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
                  kind: TalosControlPlane
                  metadata:
                    namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}
                  spec:
                    version: {{ .observed.composite.resource.spec.versions.kubernetes }}
                    replicas: 2

                    rolloutStrategy:
                      type: OnDelete

                    infrastructureTemplate:
                      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
                      kind: TinkerbellMachineTemplate
                      name: {{ $tinkTemplate.status.atProvider.manifest.metadata.name }}
                      namespace: {{ $tinkTemplate.status.atProvider.manifest.metadata.namespace }}

                    controlPlaneConfig:
                      controlplane:
                        generateType: controlplane
                        talosVersion: {{ .observed.composite.resource.spec.versions.talos }}
                        configPatches:
                          - op: replace
                            path: /debug
                            value: true

                          - op: replace
                            path: /machine/install/disk
                            value: /dev/sda

                          - op: replace
                            path: /machine/features/kubePrism/enabled
                            value: false

                          #
                          # Longhorn Requirements
                          #
                          - op: add
                            path: /machine/kubelet/extraMounts
                            value:
                              - destination: /var/lib/longhorn
                                type: bind
                                source: /var/lib/longhorn
                                options:
                                  - bind
                                  - rshared
                                  - rw

                          - op: add
                            path: /machine/sysctls
                            value:
                              vm.nr_hugepages: '1024'

                          - op: add
                            path: /machine/kernel
                            value:
                              modules:
                                - name: nvme_tcp
                                - name: vfio_pci

                          #
                          # OIDC For API Server
                          #
                          - op: add
                            path: /machine/files
                            value:
                              - path: /var/kubernetes/auth-config.yaml
                                permissions: 0o644
                                op: create
                                content: |- # yaml
                                  apiVersion: apiserver.config.k8s.io/v1beta1
                                  kind: AuthenticationConfiguration
                                  jwt:
                                    - issuer:
                                        url: https://idp.mylogin.space/application/o/che/
                                        audiences:
                                          - <path:CORE0_SITE1/data/IDE/Che/Authentik#ClientID>
                                      claimMappings:
                                        username:
                                          expression: 'claims.preferred_username'
                                        groups:
                                          expression: 'claims.groups'
                                        uid:
                                          expression: 'claims.sub'
                                      userValidationRules:
                                        - expression: "!user.username.startsWith('system:')" # the expression will evaluate to true, so validation will succeed.
                                          message: 'username cannot used reserved system: prefix'

                                    - issuer:
                                        url: https://idp.mylogin.space/application/o/headlamp/
                                        audiences:
                                          - headlamp
                                      claimMappings:
                                        username:
                                          expression: 'claims.preferred_username'
                                        groups:
                                          expression: 'claims.groups'
                                        uid:
                                          expression: 'claims.sub'
                                      userValidationRules:
                                        - expression: "!user.username.startsWith('system:')" # the expression will evaluate to true, so validation will succeed.
                                          message: 'username cannot used reserved system: prefix'

                          - op: add
                            path: /cluster/apiServer/extraVolumes
                            value:
                              - hostPath: /var/kubernetes/auth-config.yaml
                                mountPath: /var/kubernetes/auth-config.yaml
                                readonly: true

                          - op: add
                            path: /cluster/apiServer/extraArgs
                            value:
                              authentication-config: /var/kubernetes/auth-config.yaml

                          #
                          # Do not install any CNI by default, ArgoCD will automatically install the Network Base chart
                          #
                          - op: replace
                            path: /cluster/network/cni
                            value:
                              name: none

                          #
                          # KubeDNS
                          #
                          - op: replace
                            path: /machine/features/hostDNS/forwardKubeDNSToHost
                            value: false


                          #
                          # Cilium from the network base stack is running in KubeProxy replacement mode
                          #
                          - op: replace
                            path: /cluster/proxy/disabled
                            value: true

                          #
                          # Setup Logging 
                          #
                          - op: add
                            path: /machine/logging
                            value:
                              destinations:
                                - endpoint: 'udp://10.1.1.14:6051'
                                  format: 'json_lines' 
                          #
                          # Configure Remote Pullthrough Registry Cache
                          # `}}
                          - op: add
                            path: /machine/registries
                            value:
                              mirrors:
                                {{- range $registry, $path := .Values.crossplane.clusters.registry.mirror.paths }}
                                {{ $registry }}:
                                  endpoints:
                                    - {{ $.Values.crossplane.clusters.registry.mirror.base }}/{{ $path }}
                                  overridepath: true
                                {{- end }}
            ---{{`
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $clusterResource }}
            spec:
              providerConfigRef:
                name: local-k8s

              managementPolicies:
                - Observe

              forProvider:
                manifest:
                  apiVersion: resolvemy.host/v1alpha1
                  kind: Cluster
                  metadata:
                    # name in manifest is optional and defaults to Object name
                    name: {{ .observed.composite.resource.spec.claimRef.name }}
                    namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}
            ---
            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            metadata:
              annotations:
                {{ setResourceNameAnnotation $clusterResourceName }}
            spec:
              providerConfigRef:
                name: local-k8s

              readiness:
                policy: SuccessfulCreate

              forProvider:
                manifest:
                  {{ $talosCNTRLPlane := getComposedResource . $talosCNTRLPlaneResourceName }}
                  {{ $tinkCluster := getComposedResource . $tinkclusterResourceName }}
                  apiVersion: cluster.x-k8s.io/v1beta1
                  kind: Cluster
                  metadata:
                    namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}
                    labels:
                      resolvemy.host/nodetype: {{ get $xr.spec "clustertype" }}
                      resolvemy.host/clustertype: {{ get $xr.spec "clustertype" }}
                      resolvemy.host/computetype: {{ get $xr.spec "computetype" }}
                      resolvemy.host/env: {{ get $xr.spec "environment" }}

                      cluster.kubernetes.io/domain: {{ get $xr.spec "domain" }}
                      mylogin.space/tenant: 'core.mylogin.space'
                      take-along-label.capi-to-argocd.resolvemy.host/nodetype: ''
                      take-along-label.capi-to-argocd.resolvemy.host/clustertype: ''
                      take-along-label.capi-to-argocd.resolvemy.host/computetype: ''
                      take-along-label.capi-to-argocd.resolvemy.host/env: ''
                      take-along-label.capi-to-argocd.mylogin.space/tenant: ''
                      take-along-label.capi-to-argocd.cluster.kubernetes.io/domain: ''

                    annotations:
                      resolvemy.host/lbpool: {{ $networks.loadbalancer.pool }}
                      resolvemy.host/lbanycast: {{ $networks.loadbalancer.anycast }}
                      resolvemy.host/lbpublic: {{ $networks.loadbalancer.public }}
                  spec:
                    clusterNetwork:
                      pods:
                        cidrBlocks:
                          - {{ $networks.pods }}
                      
                      services:
                        cidrBlocks:
                          - {{ $networks.services }}

                    controlPlaneRef:
                      apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
                      kind: TalosControlPlane
                      name: {{ $talosCNTRLPlane.status.atProvider.manifest.metadata.name }}
                      namespace: {{ $talosCNTRLPlane.status.atProvider.manifest.metadata.namespace }}

                    infrastructureRef:
                      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
                      kind: TinkerbellCluster
                      name: {{ $tinkCluster.status.atProvider.manifest.metadata.name }}
                      namespace: {{ $tinkCluster.status.atProvider.manifest.metadata.namespace }} `}}