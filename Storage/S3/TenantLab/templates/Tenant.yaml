{{- include "bjw-s.common.loader.init" . }}

{{- define "app-template.hardcodedValues" -}}
# Set the nameOverride based on the release name if no override has been set
{{ if not .Values.global.nameOverride }}
global:
  nameOverride: "{{ .Release.Name }}"
{{ end }}

controllers:
  s3:
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets/CronJobs ignore this.
    strategy: RollingUpdate
    pod:
      {{- with .Values.s3.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      

    containers:
      minio:
        image:
          repository: minio/minio
          tag: RELEASE.2024-11-07T00-52-20Z
          pullPolicy: Always

        env:
          {{- nindent 10 (include "s3-env" $) }}

        # -- Probe configuration
        # -- [[ref]](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
        # @default -- See below
        probes:
          # -- Liveness probe configuration
          # @default -- See below
          liveness:
            # -- Enable the liveness probe
            enabled: false
            # -- Set this to `true` if you wish to specify your own livenessProbe
            custom: false
            # -- sets the probe type when not using a custom probe
            # @default -- "TCP"
            type: HTTP
            # -- The spec field contains the values for the default livenessProbe.
            # If you selected `custom: true`, this field holds the definition of the livenessProbe.
            # @default -- See below
            spec:
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3

          # -- Redainess probe configuration
          # @default -- See below
          readiness:
            # -- Enable the readiness probe
            enabled: false
            # -- Set this to `true` if you wish to specify your own readinessProbe
            custom: false
            # -- sets the probe type when not using a custom probe
            # @default -- "TCP"
            type: HTTP
            # -- The spec field contains the values for the default readinessProbe.
            # If you selected `custom: true`, this field holds the definition of the readinessProbe.
            # @default -- See below
            spec:
              exec:
                command:
                  - /Healthcheck.sh
              failureThreshold: 6
              initialDelaySeconds: 5
              periodSeconds:  30
              timeoutSeconds: 10

          # -- Startup probe configuration
          # @default -- See below
          startup:
            # -- Enable the startup probe
            enabled: false
            # -- Set this to `true` if you wish to specify your own readinessProbe
            custom: false
            # -- sets the probe type when not using a custom probe
            # @default -- "TCP"
            type: EXEC
            # -- The spec field contains the values for the default readinessProbe.
            # If you selected `custom: true`, this field holds the definition of the readinessProbe.
            # @default -- See below
            spec:
              exec:
                command:
                  - /Healthcheck.sh
              failureThreshold: 30
              initialDelaySeconds: 15
              periodSeconds:  10
              timeoutSeconds: 10


service:
  s3:
    enabled: true

    controller: s3

    type: ClusterIP

    primary: true

    ports:
      http:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port (used in probes, notes, etc...)
        # If there is more than 1 service, make sure that only 1 port is marked as primary.
        primary: true

        # -- The port number
        port: 9000

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: HTTP

        # -- Specify the appProtocol value for the Service.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
        appProtocol: http

  s3-dash:
    enabled: true

    controller: s3

    type: ClusterIP

    primary: false

    ports:
      http:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port (used in probes, notes, etc...)
        # If there is more than 1 service, make sure that only 1 port is marked as primary.
        primary: false

        # -- The port number
        port: 9090

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: HTTP

        # -- Specify the appProtocol value for the Service.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
        appProtocol: http

{{- if and .Values.s3.secrets.enabled .Values.prometheus.enabled }}
serviceMonitor:
  s3:
    # -- Enables or disables the serviceMonitor.
    enabled: true

    # -- Override the name suffix that is used for this serviceMonitor.
    nameOverride: ""

    # -- Provide additional annotations which may be required.
    annotations: {}

    # -- Provide additional labels which may be required.
    labels: {}

    # -- Configures a custom selector for the serviceMonitor, this takes precedence over
    # specifying a service name.
    # Helm templates can be used.
    selector: {}

    service:
      identifier: s3

    # -- Configures the endpoints for the serviceMonitor. Helm templates can be used.
    # @default -- See values.yaml
    endpoints:
      - port: http
        scheme: http
        path: /minio/v2/metrics/cluster
        interval: 1m
        bearerTokenSecret:
          name: '{{ .Release.Name }}-prometheus'
          key: Token
        scrapeTimeout: 10s

    # -- Configures custom targetLabels for the serviceMonitor. (All collected
    # meterics will have these labels, taking the value from the target service)
    # [[ref]](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitorspec/)
    targetLabels: []
{{- end }}

# -- Configure the gateway routes for the chart here.
# Additional routes can be added by adding a dictionary key similar to the 'main' route.
# [[ref]](https://gateway-api.sigs.k8s.io/references/spec/)
# @default -- See below
route:
  s3:
    # -- Enables or disables the route
    enabled: true

    # -- Set the route kind
    # Valid options are GRPCRoute, HTTPRoute, TCPRoute, TLSRoute, UDPRoute
    kind: HTTPRoute

    name: s3-main

    # -- Provide additional annotations which may be required.
    annotations: {}

    hostnames:
      - s3.{{ .Values.cluster.name }}.{{ .Values.datacenter }}.{{ .Values.region }}.{{ .Values.domain }}
      - '*.s3.{{ .Values.cluster.name }}.{{ .Values.datacenter }}.{{ .Values.region }}.{{ .Values.domain }}'

    # -- Provide additional labels which may be required.
    labels:
      wan-mode: 'public'


    # -- Configure the resource the route attaches to.
    parentRefs:
      - # Group of the referent resource.
        group: gateway.networking.k8s.io

        # Kind of the referent resource.
        kind: Gateway

        # Name of the referent resource
        name: {{ .Values.gateway.name }}

        sectionName: {{ .Values.gateway.sectionName }}

        # Namespace of the referent resource
        namespace: {{ .Values.gateway.namespace }}

    # -- Configure rules for routing. Defaults to the primary service.
    rules:
      - backendRefs:
          - kind: Service
            port: 9000
            identifier: s3
            weight: 1
        matches:
          - path:
              type: PathPrefix
              value: /
        timeouts:
          backendRequest: 1800s
          request: 1800s

  s3-dash:
    # -- Enables or disables the route
    enabled: true

    # -- Set the route kind
    # Valid options are GRPCRoute, HTTPRoute, TCPRoute, TLSRoute, UDPRoute
    kind: HTTPRoute

    suffix: s3-dash

    # -- Provide additional annotations which may be required.
    annotations: {}

    hostnames:
      - {{ .Values.admin.dashboard.domainKey }}.{{ .Values.cluster.name }}.{{ .Values.datacenter }}.{{ .Values.region }}.{{ .Values.domain }}

    # -- Provide additional labels which may be required.
    labels:
      wan-mode: 'public'


    # -- Configure the resource the route attaches to.
    parentRefs:
      - # Group of the referent resource.
        group: gateway.networking.k8s.io

        # Kind of the referent resource.
        kind: Gateway

        # Name of the referent resource
        name: {{ .Values.gateway.name }}

        sectionName: {{ .Values.gateway.sectionName }}

        # Namespace of the referent resource
        namespace: {{ .Values.gateway.namespace }}

    # -- Configure rules for routing. Defaults to the primary service.
    rules:
      - backendRefs:
          - kind: Service
            port: 9090
            identifier: s3-dash
            weight: 1
        matches:
          - path:
              type: PathPrefix
              value: /

persistence:
  data:
    enabled: true
    type: persistentVolumeClaim
    mountPath: 
    accessMode: ReadWriteOnce
    storageClass: {{ .Values.s3.storage.storageClass }}
    size: {{ .Values.s3.storage.size }}
    globalMounts:
      - path: /export
        readOnly: false
{{- end -}}
{{- $_ := mergeOverwrite .Values (include "app-template.hardcodedValues" . | fromYaml) -}}


{{- if lt (int .Values.s3.replicas) 3 }}
{{/* Render the templates */}}
{{ include "bjw-s.common.loader.generate" . }}
---
apiVersion: gateway.envoyproxy.io/v1alpha1
kind: BackendTrafficPolicy
metadata:
  name: {{ include "bjw-s.common.lib.chart.names.fullname" . }}-s3

spec:
  targetRefs:
    - group: gateway.networking.k8s.io
      kind: HTTPRoute
      name: {{ include "bjw-s.common.lib.chart.names.fullname" . }}

  timeout:
    http:
      requestTimeout: 1800s
---
{{- else }}
apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  name: {{ .Release.Name }}

scheduler:
  name: ""
spec:
  configuration:
    name: {{ .Release.Name }}-config

  imagePullSecret: {}

  mountPath: /export
  features:
    bucketDNS: true
    enableSFTP: false
    domains:
      minio:
        - s3.mylogin.space

  pools:
    - name: pool-0

      resources:
        requests:
          cpu: 64m
          memory: 512Mi

      servers: {{ .Values.s3.replicas }}

      volumeClaimTemplate:
        metadata:
          name: data
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: '{{ .Values.s3.storage.size }}'
      volumesPerServer: 1

  priorityClassName: tier2-priority

  env:
    {{- nindent 4 (include "s3-env" $) }}

  prometheusOperator: false
  # prometheus:
  #   diskCapacityGB: 20
  #   resources: {}
  #   securityContext:
  #     fsGroup: 1000
  #     runAsGroup: 1000
  #     runAsNonRoot: true
  #     runAsUser: 1000

  requestAutoCert: false
{{- end }}