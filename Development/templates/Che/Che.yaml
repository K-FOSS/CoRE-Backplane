# {{ if .Values.che.enabled }}
apiVersion: org.eclipse.che/v2
kind: CheCluster
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: '5'

  name: devspaces

  namespace: eclipse-che
spec:
  components:
    cheServer:
      deployment:
        containers:
          - name: che
            resources:
              request:
                cpu: '256m'
                memory: '512Mi'
          
      debug: false
      logLevel: INFO
      extraProperties:
        CHE_OIDC_USERNAME__CLAIM: preferred_username

    # dashboard:
    #   # headerMessage:
    #   #   show: false
    #   #   text: >-
    #   #     It's time to get your Dev on!

    devfileRegistry:
      # deployment:
      #   containers:
      #     - name: devfile-registry
      #       # image: quay.io/eclipse/che-devfile-registry:next
      #       image: registry.redhat.io/devspaces/devfileregistry-rhel8:latest
      externalDevfileRegistries:
        - url: https://eclipse-che.github.io/che-devfile-registry/main

    metrics:
      enable: true

    # pluginRegistry:
    #   openVSXURL: "https://open-vsx.org"
    #   openVSXURL: "https://marketplace.visualstudio.com"

  containerRegistry: {}

  devEnvironments:
    defaultEditor: che-incubator/che-code/latest

    security:
      containerSecurityContext: 
        privileged: true

    persistUserHome:
      enabled: true


    #
    # Idle after 12 hours of running
    #
    secondsOfRunBeforeIdling: 43200

    #
    # 6 hours of inactivity
    #
    secondsOfInactivityBeforeIdling: 21600
    maxNumberOfRunningWorkspacesPerUser: 4
    maxNumberOfWorkspacesPerUser: -1

    #
    # Allow it to take 1800 seconds to start up
    #
    startTimeoutSeconds: 1800

    defaultComponents:
      - container:
          sourceMapping: /projects
          image: registry.writemy.codes/proxy-quay.io/devfile/universal-developer-image:latest
          env:
            - name: DOCKER_HOST
              value: 'tcp://127.0.0.1:2376'
        name: universal-developer-image


      #
      # TODO: Move this to Kubemod or similar, have a mutating webhook that checks users authorization and grants them an extra Docker in Docker container for Container related stuff, along with a virtual
      # Kubernetes environment with Loft or even a fully functional cluster API Kamaji or similar, that reminds me I need to get around to actually getting the cluster operators and stuff online
      #
      # - container:
      #     sourceMapping: /projects
      #     image: docker:25.0-dind-rootless
      #     env:
      #       - name: DOCKERD_ROOTLESS_ROOTLESSKIT_FLAGS
      #         value: '-p 0.0.0.0:2376:2376/tcp'
      #     endpoints:
      #       - exposure: none
      #         name: did
      #         protocol: tcp
      #         targetPort: 2376
      #   name: docker-in-docker

    defaultNamespace:
      autoProvision: true
      template: <username>-che

    storage:
      pvcStrategy: per-user

  networking:
    domain: ide.{{ .Values.cluster.name }}.{{ .Values.datacenter }}.{{ .Values.region }}.{{ .Values.domain }}
    tlsSecretName: writemycodes-default-certificates

    auth:
      identityProviderURL: 'https://idp.mylogin.space/application/o/che/'
      oAuthScope: openid email profile offline_access

      oAuthClientName: <path:CORE0_SITE1/data/IDE/Che/Authentik#ClientID>
      oAuthSecret: <path:CORE0_SITE1/data/IDE/Che/Authentik#ClientSecret>
 
      advancedAuthorization:
        allowGroups:
          - Developers

      gateway:
        deployment:
          containers:
            - name: gateway
              resources:
                request:
                  cpu: '20m'
                limits:
                  cpu: '20m'

        configLabels:
          app: che
          component: che-gateway-config
{{- end }}