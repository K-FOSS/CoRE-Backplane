env: prod

turnServers:
  - hostname: turn.mylogin.space
    auth:
      sso: true


stunServers:
  - hostname: nat.mylogin.space



netbird:
  clusterDomain: k0s.resolvemy.host

  domain: vpn.mylogin.space
  
  #
  # TODO: Get this automated by Renovate or similar
  # 
  version: v2.9.0

  gateway:
    name: main-gw
    namespace: core-prod
    sectionName: https-myloginspace

  enabled: false
  auth:
    useAuth0: false

    oidc:
      provider: https://idp.mylogin.space/application/o/netbird
      tokenEndpoint: https://idp.mylogin.space/application/o/token/

  secrets:
    secretStoreRef:
      kind: ClusterSecretStore
      name: mainvault-core

    oidc:
      VaultKey: NetBird/OIDC

      ClientIDPath: ClientID
      ClientSecretPath: ClientSecret


  signal:
    enabled: false

    port: 10000
    service:
      enabled: true
      type: LoadBalancer # or LoadBalancer
      labels: {}

      loadBalancerIP: ''

  management:
    enabled: false


    port: 33073
    service:
      enabled: true
      type: LoadBalancer
      labels: {}
      annotations:
        metallb.universe.tf/allow-shared-ip: istio
        io.cilium/lb-ipam-sharing-key: public-gw
        metallb.universe.tf/loadBalancerIPs: 66.165.222.101
        io.cilium/lb-ipam-ips: 66.165.222.101

      externalIPs: []
      loadBalancerIP: ''

controllers:
  netbird-dashboard:
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets/CronJobs ignore this.
    strategy: RollingUpdate

    containers:
      netbird-dashboard:
        image:
          repository: netbirdio/dashboard
          tag: '{{ $.Values.netbird.version }}'
          pullPolicy: Always

        env:
          - name: AUTH_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-netbird-config'
                key: AUTH_AUDIENCE
                optional: false

          - name: USE_AUTH0
            value: 'false'

          - name: AUTH_SUPPORTED_SCOPES
            valueFrom:
              secretKeyRef:
                name: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-netbird-config'
                key: AUTH_SUPPORTED_SCOPES
                optional: false

          - name: AUTH_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: '{{ include "bjw-s.common.lib.chart.names.fullname" $ }}-netbird-config'
                key: AUTH_CLIENT_ID
                optional: false

          - name: AUTH_AUTHORITY
            value: 'https://idp.mylogin.space/application/o/netbird'

          - name: NETBIRD_MGMT_API_ENDPOINT
            value: https://{{ $.Values.netbird.domain }}:33073

          - name: NETBIRD_MGMT_GRPC_API_ENDPOINT
            value: https://{{ $.Values.netbird.domain }}:33073


  netbird-management:
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets/CronJobs ignore this.
    strategy: RollingUpdate

    containers:
      netbird-management:
        image:
          repository: netbirdio/managemen
          tag: v2.9.0
          pullPolicy: Always

        args:
          - --port=80
          - --log-file=console
          - --log-level=info
          - --disable-anonymous-metrics=false
          - --single-account-mode-domain=netbird.example.com
          - --dns-domain=netbird.selfhosted

  netbird-relay:
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets/CronJobs ignore this.
    strategy: RollingUpdate

    containers:
      netbird-relay:
        image:
          repository: netbirdio/relay
          tag: v2.9.0
          pullPolicy: Always

  netbird-signal:
    # For Deployments, valid values are Recreate (default) and RollingUpdate.
    # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
    # DaemonSets/CronJobs ignore this.
    strategy: RollingUpdate

    containers:
      netbird-signal:
        image:
          repository: netbirdio/signal
          tag: v2.9.0
          pullPolicy: Always


service:
  netbird-dashboard:
    # -- Enables or disables the service
    enabled: true

    # -- Configure which controller this service should target
    controller: netbird-dashboard

    nameOverride: nb-dashboard

    # -- Make this the primary service for this controller (used in probes, notes, etc...).
    # If there is more than 1 service targeting the controller, make sure that only 1 service is
    # marked as primary.
    primary: false

    # -- Set the service type
    type: ClusterIP

    # -- Specify the externalTrafficPolicy for the service. Options: Cluster, Local
    # -- [[ref](https://kubernetes.io/docs/tutorials/services/source-ip/)]
    externalTrafficPolicy:

    # -- Specify the ip policy. Options: SingleStack, PreferDualStack, RequireDualStack
    ipFamilyPolicy:
    # -- The ip families that should be used. Options: IPv4, IPv6
    ipFamilies: []

    # # -- Provide additional annotations which may be required.
    annotations: {}
    # -- Provide additional labels which may be required.
    labels: {}
    # -- Allow adding additional match labels
    extraSelectorLabels: {}

    ports:
      http:
        # -- Enables or disables the port
        enabled: true

        # -- Make this the primary port (used in probes, notes, etc...)
        # If there is more than 1 service, make sure that only 1 port is marked as primary.
        primary: true

        # -- The port number
        port: 80

        # -- Port protocol.
        # Support values are `HTTP`, `HTTPS`, `TCP` and `UDP`.
        # HTTP and HTTPS spawn a TCP service and get used for internal URL and name generation
        protocol: HTTP

        # -- Specify the appProtocol value for the Service.
        # [[ref]](https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol)
        appProtocol: http

netmaker:
  clusterDomain: cluster.local

  domain: mesh.mylogin.space

  gateway:
    name: main-gw
    namespace: core-prod
    sectionName: https-myloginspace

  database:
    host: psql-int.mylogin.space
    port: 5432

  server:
    enabled: true

    wireguard:
      min: 51821
      max: 51830

    extraPorts:
      min: 31821
      max: 32000

    image:
      repository: gravitl/netmaker
      tag: latest
      pullPolicy: Always
      pullSecrets: []

    replicaCount: 1

    resources:
      requests:
        cpu: 100m
        memory: 128Mi

      # limits:
      #   cpu: 100m
      #   memory: 128Mi

    certSANs:
      dnsNames: []
      ipAddresses: []

    extraArgs: {}

    labels: {}
    annotations: {}
    podLabels:
      logs: loki-myloginspace

    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    podAntiAffinity: soft
    podAntiAffinityTopologyKey: kubernetes.io/hostname
    affinity: {}
    extraEnv: []
    sidecars: []
    extraVolumes: []
    extraVolumeMounts: []


    port: 8080
    service:
      enabled: true
      type: ClusterIP # or LoadBalancer
      labels: {}

      annotations: {}

      externalIPs: []
      loadBalancerIP: ''

  ui:
    enabled: true

    image:
      repository: gravitl/netmaker-ui
      tag: latest
      pullPolicy: Always
      pullSecrets: []

    replicaCount: 1

    resources:
      requests:
        cpu: 100m
        memory: 128Mi

      # limits:
      #   cpu: 100m
      #   memory: 128Mi

    certSANs:
      dnsNames: []
      ipAddresses: []

    extraArgs: {}

    labels: {}
    annotations: {}
    podLabels:
      logs: loki-myloginspace

    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    podAntiAffinity: soft
    podAntiAffinityTopologyKey: kubernetes.io/hostname
    affinity: {}
    extraEnv: []
    sidecars: []
    extraVolumes: []
    extraVolumeMounts: []


    port: 80
    service:
      enabled: true
      type: ClusterIP # or LoadBalancer
      labels: {}

      annotations: {}

      externalIPs: []
      loadBalancerIP: ''
