{{ if .Values.dhcp.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: '{{ include "bjw-s.common.lib.chart.names.fullname" . }}-dhcp-tpl'

  labels:
    {{- include "bjw-s.common.lib.metadata.allLabels" . | nindent 4 }}

  annotations:
    argocd.argoproj.io/sync-wave: '0'

data:
  KeaCA.jsonc: | #json
      {{`{
        // This is a basic configuration for the Kea Control Agent.
        // RESTful interface to beb8 available at http://0.0.0.0:8000/
        "Control-agent": {
          "http-host": "0.0.0.0",
          "http-port": 8000,
          // Control sockets to Kea daemons.
          "control-sockets": {
            // This is how the Agent can communicate with the DHCPv4 server.
            "dhcp4": {
              "comment": "socket to DHCP4 server",
              "socket-type": "unix",
              "socket-name": "/var/run/DHCP/kea4-ctrl-socket"
            },
            // Location of the D2 command channel socket.
            "d2": {
              "socket-type": "unix",
              "socket-name": "/var/run/DHCP/kea-ddns-ctrl-socket"
            }
          },
          // Specify hooks libraries that are attached to the Control Agent.
          // Such hooks libraries should support 'control_command_receive'
          // hook point. This is currently commented out because it has to
          // point to the existing hooks library. Otherwise the Control
          // Agent will fail to start.
          "hooks-libraries": [],
          // Logging configuration starts here. Kea uses different loggers to log various
          // activities. For details (e.g. names of loggers), see Chapter 18.
          "loggers": [
            {
              // This specifies the logging for Control Agent daemon.
              "name": "kea-ctrl-agent",
              "output_options": [
                {
                  // Specifies the output file. There are several special values
                  // supported:
                  // - stdout (prints on standard output)
                  // - stderr (prints on standard error)
                  // - syslog (logs to syslog)
                  // - syslog:name (logs to syslog using specified name)
                  // Any other value is considered a name of a time
                  "output": "stdout",
                  // This governs whether the log output is flushed to disk after
                  // every write.
                  // "flush": false,
                  // This specifies the maximum size of the file before it is
                  // rotated.
                  // "maxsize": 1048576,
                  // This specifies the maximum number of rotated files to keep.
                  // "maxver": 8
                }
              ],
              // This specifies the severity of log messages to keep. Supported values
              // are: FATAL, ERROR, WARN, INFO, DEBUG
              "severity": "WARN"
            }
          ]
        }
      }`}}
  NetConf.jsonc: | #jsonc
    {{`{
        "Netconf": {
          // Three flags control netconf (default values are true):
          // - "boot-update" about the YANG configuration load when
          //   netconf boots.
          // - "subscribe-changes" about the subscription to notifications
          //   when the running YANG module is changed.
          // - "validate-changes" allows to validate changes or not.
          "boot-update": true,
          "subscribe-changes": true,
          "validate-changes": true,
          // This map specifies how each server is managed:
          // the YANG model to use and the control channel.
          "managed-servers": {
            // This is how Netconf can communicate with the DHCPv4 server.
            "dhcp4": {
              // Eventually, the kea-netconf will be able to handle multiple
              // models. However, for the time being the only choice for
              // DHCPv4 server is kea-dhcp4-server model.
              "model": "kea-dhcp4-server",
              // The three control flags can be defined in this scope too
              // and takes precedence over global and default values.
              // boot-update determines whether the initial configuration
              // should be retrieved from netconf during kea-netconf startup.
              // You almost always want to set this to yes.
              "boot-update": true,
              // This flag control whether the kea-netconf daemon should
              // subscribe to any changes. If set to true, kea-netconf will
              // monitor sysrepo and will pick up any changes that may be
              // introduced, either using netconf clients or sysrepocfg.
              "subscribe-changes": true,
              // This parameters specifies whether kea-netconf will attempt
              // to verify if the upcoming NETCONF configuration is sane. The
              // verification is done by calling config-test. Depending on
              // Kea response, the new configuration is accepted or rejected.
              "validate-changes": false,
              // Currently three control channel types are supported:
              // - "stdout" which output the configuration on the standard
              //   output (this is mainly for testing purposes, but you can
              //   use simple script (such as curl or socat) to pass that
              //   information to the server.
              // - "unix" which uses the local control channel supported by
              //   "dhcp4" and "dhcp6" servers ("d2" support is coming in Kea 1.5)
              // - "http" which uses the Control Agent (CA) to manage itself or
              //   to forward commands to "dhcp4" or "dhcp6".
              "control-socket": {
                "socket-type": "unix",
                "socket-name": "/var/run/DHCP/kea4-ctrl-socket"
              },
              // Comment is optional. You can put some notes here.
              "comment": "Kea DHCP4 server serving network on floor 13"
            }
          },
          // Netconf is able to load hook libraries that augment its operation.
          // The primary functionality is the ability to add new commands.
          //
          // Uncomment this section to load a hook library.
          //
          // "hooks-libraries": [
          //    // Hook libraries list may contain more than one library.
          //    {
          //        // The only necessary parameter is the library filename.
          //        "library": "/opt/local/netconf-commands.so",
          //
          //        // Some libraries may support parameters. Make sure you
          //        // type this section carefully, as the CA does not validate
          //        // it (because the format is library specific).
          //        "parameters": {
          //            "param1": "foo"
          //        }
          //    }
          //]
          // Similar to other Kea components, Netconf also uses logging.
          "loggers": [
            {
              "name": "kea-netconf",
              "output_options": [
                {
                  //"output": "/var/log/kea-netconf.log",
                  "output": "stdout",
                  // Several additional parameters are possible in addition
                  // to the typical output. Flush determines whether logger
                  // flushes output to a file. Maxsize determines maximum
                  // filesize before the file is being rotated. maxver
                  // specifies the maximum number of rotated files being
                  // kept.
                  "flush": true,
                  "maxsize": 204800,
                  "maxver": 4,
                }
              ],
              // You can change the severity to DEBUG, INFO, WARN, ERROR or
              // CRIT. For DEBUG level, you can also additionally specify
              // debuglevel (0-99, higher = more verbose). All configurations
              // are logged on DEBUG/55.
              "severity": "INFO",
              "debuglevel": 0
            }
          ]
        }
      }
    `}}
  DDNS.jsonc: | #jsonc
    {{`
      {
        // Kea DHCP-DDNS server configuration begins here.
        "DhcpDdns": {
          // Global Parameters
          // IP address D2 will listen for update requests at.
          // Default is 127.0.0.1
          "ip-address": "127.0.0.1",
          // Port D2 will listen for update requests on.
          // Default is 53001.
          "port": 53001,
          // Maximum time to we will wait for a DNS server to respond to us.
          // Unit is the millisecond, default is 100ms.
          "dns-server-timeout": 12000,
          // Protocol to use for Name Change Requests from a Kea DHCP server.
          // Currently only 'UDP' is supported.
          "ncr-protocol": "UDP",
          // Format to use for Name Change Requests from a Kea DHCP server.
          // Currently only 'JSON' is supported.
          "ncr-format": "JSON",
          // Command control socket configuration parameters for Kea DHCP-DDNS server.
          "control-socket": {
            // Location of the unix domain socket file the DHCP-DDNS server uses
            // to receive control commands from the Kea Control Agent or the
            // local server administrator.
            "socket-name": "/var/run/DHCP/kea-ddns-ctrl-socket",
            // Control socket type used by the Kea DHCP-DDNS server.
            // The 'unix' socket is currently the only supported type.
            "socket-type": "unix"
          },
          // List of hooks libraries and their specific configuration parameters
          // to be loaded by Kea DHCP-DDNS server.
          "hooks-libraries": [],
          // Forward DDNS (Dynamic DNS).
          "forward-ddns": {
            // List of DDNS domains.
            "ddns-domains": [
              {
                // Name of the zone (required).
                "name": "resolvemy.host.",
                // List of DNS servers where to send DNS updates.
                "dns-servers": [
                  {
                    "ip-address": "127.0.0.1",
                    "port": 1053
                  }
                ]
              }
            ]
          },
          // Reverse DDNS (Dynamic DNS).
          "reverse-ddns": {
            // List of DDNS domains.
            "ddns-domains": [
              {
                // Name of the zone (required).
                "name": "in-addr.arpa.",
                // List of DNS servers where to send DNS updates.
                "dns-servers": [
                  {
                    "ip-address": "127.0.0.1",
                    "port": 1053
                  }
                ]
              }
            ]
          },
          // List of TSIG keys used to protect DNS updates.
          "tsig-keys": [],
          // List of loggers used by the servers using this configuration file.
          "loggers": [
            {
              // Name of the logger.
              "name": "kea-dhcp-ddns",
              // Configures how the log should be output.
              "output_options": [
                {
                  // Specifies logging destination.
                  "output": "stdout",
                  // Specifies log entry content
                  "pattern": "%D{%Y-%m-%d %H:%M:%S.%q} %-5p [%c/%i] %m\n"
                }
              ],
              "severity": "DEBUG",
              "debuglevel": 99
            }
          ]
        }
      }

    `}}

  DHCP6.jsonc: | #jsonc
    {{`
      {
        "Dhcp6": {
          // Kea is told to listen on ethX network interface only.
          "interfaces-config": {
            "interfaces": [
              "*"
            ],
            // This makes interfaces to be re-detected at each (re-)configuration.
            // By default it is true.
            "re-detect": false
          },
          // This defines a control socket. If defined, Kea will open a UNIX socket
          // and will listen for incoming commands. See section 15 of the Kea User's
          // Guide for list of supported commands.
          "control-socket": {
            "socket-type": "unix",
            "socket-name": "/var/run/DHCP/kea6-ctrl-socket"
          },
          // We need to specify the database used to store leases. As of
          // September 2016, four database backends are supported: MySQL,
          // PostgreSQL, Cassandra, and the in-memory database, Memfile.
          // We will use memfile  because it doesn't require any prior set up.
          "lease-database": {
            "type": "postgresql",
            "name": "hRCyPUlFYx",
            "host": "{{ .Hostname }}",
            "port": {{ .Port }},
            "user": "{{ .Username }}",

            "password": "{{ .Password }}",
            "reconnect-wait-time": 3000, // expressed in ms
            "max-reconnect-tries": 3,
            "on-fail": "stop-retry-exit",
            "connect-timeout": 3
          },
          "sanity-checks": {
            // This parameter determines what to do when a new lease appears in the
            // system (i.e. either is read from disk during memfile startup or is
            // added via lease commands). There are five modes supported:
            // none - do nothing, accept them as is
            // warn - if subnet-id problems are detected, print a warning, but
            //        otherwise load the lease as is. This is the default value.
            // fix - attempt to fix the lease by finding appropriate subnet-id value.
            //       if there is no suitable subnet, the lease is loaded as is.
            // fix-del - attempt to fix the lease by finding appropriate subnet-id
            //           value. If there is no suitable subnet, the lease is deleted.
            // del - delete leases that have incorrect subnet-id values.
            "lease-checks": "fix-del"
          },
          // Kea 0.9.1 introduced MAC/hardware addresses support in DHCPv6. There is
          // no single reliable method of getting MAC address information in DHCPv6.
          // Kea supports several methods. Depending on your network set up, some
          // methods may be more preferable than others, hence the configuration
          // parameter. 'mac-sources' is a list of methods. Allowed parameters are:
          // any, raw, duid, ipv6-link-local, client-link-addr-option, rfc6939 (which
          // is an alias for client-link-addr-option), remote-id, rfc4649 (which is an
          // alias for remote-id, subscriber-id, rfc4580 (which is an alias for
          // subscriber-id) and docsis.
          //


          // Addresses will be assigned with preferred and valid lifetimes
          // being 3000 and 4000, respectively. Client is told to start
          // renewing after 1000 seconds. If the server does not respond
          // after 2000 seconds since the lease was granted, client is supposed
          // to start REBIND procedure (emergency renewal that allows switching
          // to a different server).
          "preferred-lifetime": 3000,
          "valid-lifetime": 4000,
          "renew-timer": 1000,
          "rebind-timer": 2000,
          // The following list defines subnets. Each subnet consists of at
          // least subnet and pool entries. Note the user-context being
          // used throughout the definitions. This is something that is not
          // being used by Kea, it's simply parsed and stored in appropriate
          // structures. You can put anything you want in the user-context
          // as long as it is a valid JSON and it starts with a map (i.e.
          // is enclosed by curly brackets).
          // A comment entry is translated into a user-context with a
          // "comment" property so you can include comments inside the
          // configuration itself.
          "subnet6": [
            {
              "pools": [
                {
                  "pool": "2001:db8:1::/80",
                  // This is user context specified for this particular
                  // pool. You can use it to describe the pool in some way.
                  // Just keep in mind that the structure will not be used
                  // by Kea itself. It will be made available to hooks if
                  // they want to use it.
                  "user-context": {
                    "department": "engineering"
                  }
                }
              ],
              // Here's the user-context for the whole subnet.
              "user-context": {
                "comment": "Floor one, west wing"
              },
              // Equivalent using smart parser
              // "comment": "Floor one, west wing",
              // This defines PD (prefix delegation) pools. In this case
              // we have only one pool. That consists of /64 prefixes
              // being delegated out of large /48 pool. Each delegated
              // prefix will contain an excluded-prefix option.
              "pd-pools": [
                {
                  "prefix": "2001:db8:abcd::",
                  "prefix-len": 48,
                  "delegated-len": 64,
                  "excluded-prefix": "2001:db8:abcd:1234::",
                  "excluded-prefix-len": 72,
                  // Another user-context for this PD pool. Again, you can put
                  // anything you want in there as long as it's valid JSON and
                  // starts with a map.
                  "user-context": {
                    "purpose": "For CPE devices"
                  }
                }
              ], // end of pools
              "subnet": "2001:db8:1::/64",
              "interface": "ethX",
              // Sometimes the relay may use an odd IPv6 address that's not matching
              // the subnet. This is discouraged, but there are valid cases when it
              // makes sense. One case is when the relay has only link-local address
              // and another is when there is a shared subnet scenario.
              "relay": {
                "ip-address": "3000::1"
              }
            }
          ],
          // The following configures logging. It assumes that messages with at
          // least informational level (info, warn, error and fatal) should be
          // logged to stdout.
          "loggers": [
            {
              "name": "kea-dhcp6",
              "output_options": [
                {
                  "output": "stdout",
                  // Several additional parameters are possible in addition
                  // to the typical output. Flush determines whether logger
                  // flushes output to a file. Maxsize determines maximum
                  // filesize before the file is being rotated. maxver
                  // specifies the maximum number of rotated files being
                  // kept.
                  "flush": true,
                  "maxsize": 204800,
                  "maxver": 4,
                }
              ],
              "debuglevel": 0,
              "severity": "INFO"
            }
          ]
        }
      }
    `}}

  DHCP4.jsonc: | #jsonc
    {{`
      {
        "Dhcp4": {
          "authoritative": false,
          // Global bootfile name to be set in the 'file' field.
          "client-classes": [
            {
              "name": "tinkerbell",
              "test": "substring(option[77].hex,0,10) == 'Tinkerbell'",
              "boot-file-name": "http://10.1.1.66:7171/auto.ipxe"
            },
            {
              "name": "ipxe",
              "test": "option[77].hex == 'iPXE'",
              "boot-file-name": "http://pxe.example.com/menu.ipxe",
              "option-data": [
                {
                  "name": "tftp-server-name",
                  "data": "10.1.1.66"
                }
              ]
            },
            {
              "name": "pxe-legacy",
              "test": "not member('ipxe') and option[93].hex == 0x0000",
              "next-server": "10.1.1.66",
              "option-data": [
                {
                  "name": "tftp-server-name",
                  "data": "10.1.1.66"
                },
                {
                  "name": "boot-file-name",
                  "data": "undionly.kpxe"
                }
              ]
            },
            {
              "name": "pxe-uefi",
              "test": "not member('ipxe') and not member('pxe-legacy')",
              "next-server": "10.44.5.76",
              "option-data": [
                {
                  "name": "tftp-server-name",
                  "data": "10.44.5.76"
                },
                {
                  "name": "boot-file-name",
                  "data": "images/ipxe.efi"
                },
                {
                  "name": "dhcp-server-identifier",
                  "data": "10.44.5.76" 
                }
              ]
            },
            {
              "name": "ubnt",
              "test": "substring(option[60].hex,0,4) == 'ubnt'",
              "option-def": [
                {
                  "name": "vendor-encapsulated-options",
                  "type": "empty",
                  "encapsulate": "ubnt",
                  "code": 43
                }
              ],
              "option-data": [
                {
                  "name": "unifi-address",
                  "space": "ubnt",
                  "data": "66.165.222.102"
                },
                {
                  "name": "vendor-encapsulated-options"
                }
              ]
            },
            {
              "name": "vmhost-class1",
              "next-server": "10.1.1.66",
              "option-data": []
            },
            {
              "name": "boots",
              "next-server": "10.1.1.66",
              "option-data": []
            },
            {
              "name": "kioslab",
              "server-hostname": "static.mylogin.space"
            },
            {
              "name": "onie",
              "test": "substring(option[60].hex,0,11) == 'onie_vendor'",
              "option-data": [
                {
                  // In "option-data" list we have to configure option 125 with data parameter equal
                  // to vendor-id we are expecting, also it will tell Kea which vendor space
                  // encapsulate in suboptions.
                  "data": "42623",
                  "name": "vivso-suboptions"
                }
              ]
            }
          ],
          "control-socket": {
            // Location of the unix domain socket file the DHCPv4 server uses
            // to receive control commands from the Kea Control Agent or the
            // local server administrator.
            "socket-name": "/var/run/DHCP/kea4-ctrl-socket",
            // Control socket type used by the Kea DHCPv4 server. The 'unix'
            // socket is currently the only supported type.
            "socket-type": "unix"
          },
          // Boolean flag indicating that server should ignore DHCP client
          // wishes to update DNS on its own. With that flag set to true
          // the server will send DNS updates for both forward and
          // reverse DNS data. The default value is false, which indicates
          // that the server will delegate DNS update to the client when
          // requested. It may be specified at the global, shared-network
          // and subnet levels.
          "ddns-override-client-update": true,
          // Boolean flag indicating that the server should override DHCP
          // client's wish to not update the DNS. With this parameter
          // set to true the server will send DNS update even when
          // the client requested no update.  It may be specified at the
          // global, shared-network and subnet levels.
          "ddns-override-no-update": true,
          // Suffix appended to the partial name sent to the DNS. The
          // default value is an empty string which indicates that no
          // suffix is appended.  It may be specified at the global,
          // shared-network and subnet levels.
          "ddns-qualifying-suffix": "resolvemy.host.",
          // Enumeration specifying whether the server should honor
          // hostname or Client FQDN sent by the client or replace
          // this name. The acceptable values are: "never" (use the
          // name the client sent), "always" (replace the name the
          // client sent), "when-present" (replace the name the client
          // sent, but do not generate one when the client didn't sent
          // the name), "when-not-present" (generate the name when
          // client didn't send one, otherwise leave the name the
          // client sent). The default value is "never".  It may be
          // specified at the global, shared-network and subnet levels.
          "ddns-replace-client-name": "when-not-present",
          // Boolean flag which enables or disables the DDNS updating. It
          // defaults to true.  It may be specified at the global, shared-
          // network and subnet levels. It works in conjunction with
          // dhcp-ddns:enable-updates which must be true to enable connectivity
          // to kea-dhcp-ddns.
          "ddns-send-updates": true,
          // Boolean flag, which when true instructs the server to always
          // update DNS when leases are renewed, even if the DNS information
          // has not changed.  The server's default behavior (i.e. flag is false)
          // is to only update DNS if the DNS information has changed.  It
          // may be specified at the global, shared-network and subnet levels.
          "ddns-update-on-renew": true,
          // Boolean flag, which is passed to kea-dhcp-ddns with each DDNS
          // update request to indicate whether or not DNS update conflict
          // resolution as described in RFC 4703 should be employed for the
          // given update request.  The default value for this flag is true.
          // It may be specified at the global, shared-network and subnet levels.
          "ddns-use-conflict-resolution": true,
          // Time in seconds specifying how long a declined lease should be
          // excluded from DHCP assignments. The default value is 24 hours.
          "decline-probation-period": 86400,
          // Name Change Requests forwarding configuration for Kea DHCPv4 server.
          // NCRs are sent to Kea D2 module to update DNS upon allocation of the
          // DHCP leases.
          "dhcp-ddns": {
            // Boolean flag indicating if Kea DHCPv4 server should connect to
            // kea-dhcp-ddns.  This must be true for NCRs to be created and
            // sent to kea-dhcp-ddns. By default NCRs are not generated.
            "enable-updates": true,
            // Specifies maximum number of NCRs to queue waiting to be sent
            // to Kea D2 server.
            "max-queue-size": 1024,
            // Packet format to use when sending NCRs to Kea D2 server.
            // Currently, only JSON format is supported.
            "ncr-format": "JSON",
            // Socket protocol to use when sending NCRs to D2. Currently,
            // only UDP is supported.
            "ncr-protocol": "UDP",
            // IP address that Kea DHCPv4 server should use to send
            // NCRs to D2. Default value of zero indicates that Kea
            // should pick suitable address.
            "sender-ip": "127.0.0.1",
            // Port number that Kea DHCPv4 server should use to send
            // NCRs to D2. Default value of zero indicates that Kea
            // should pick suitable port.
            "sender-port": 0,
            // IP address on which D2 listens for NCRs.
            "server-ip": "127.0.0.1",
            // Port number on which D2 listens for NCRs.
            "server-port": 53001
          },
          // Boolean flag indicating whether or not the Kea DHCPv4 server
          // should send back Client Identifier option in its responses.
          // The default value is true which indicates that the option
          // must be sent back if the client included it. The false
          // value instructs the server to not send this option for
          // backward compatibility with older DHCP specifications which
          // stated that Client Identifier must not be sent back.
          "echo-client-id": false,
          // Collection of Kea DHCPv4 server parameters configuring how
          // the server should process expired DHCP leases.
          "expired-leases-processing": {
            // Specifies the number of seconds since last removal of
            // the expired leases when next removal should occur.
            "flush-reclaimed-timer-wait-time": 25,
            // Specifies the time period in seconds to keep expired
            // leases in the lease database (lease affinity).
            "hold-reclaimed-time": 3600,
            // Specifies the maximum number of expired leases that can be
            // processed in a single attempt to clean up the lease
            // database from the expired leases. If there are more
            // expired leases, they will be processed during the next
            // cleanup attempt.
            "max-reclaim-leases": 100,
            // Specifies the maximum time in milliseconds that the single
            // attempt to cleanup the lease database from the expired
            // leases may take.
            "max-reclaim-time": 250,
            // Specifies the time period in seconds since last attempt
            // to process expired leases to initiate the next attempt.
            "reclaim-timer-wait-time": 10,
            // Specifies the maximum number of expired leases processing
            // cycles which didn't result in full cleanup of the lease
            // database from the expired leases, after which a
            // warning message is issued.
            "unwarned-reclaim-cycles": 5
          },
          "hooks-libraries": [
            {
              "library": "/usr/lib/kea/hooks/libdhcp_lease_cmds.so",
              "parameters": {}
            },
            {
              "library": "/usr/lib/kea/hooks/libdhcp_stat_cmds.so",
              "parameters": {}
            },
            {   
              "library": "/usr/lib/kea/hooks/libdhcp_flex_option.so",
              "parameters": {
                "options": [
                  {
                    "code": 67,
                    "add": "ifelse(option[host-name].exists,concat(option[host-name].text,'.boot'),'')"
                  }
                ]
              }
            }
          ],
          // List of access credentials to external sources of IPv4 reservations,
          "hosts-databases": [],
          // List of host reservation identifier types to be used by the
          // Kea DHCPv4 server to fetch static reservations for the
          // DHCP clients. All identifiers are used by default, which
          // means that the server will issue multiple queries to the
          // database to find if there is a reservation for the particular
          // client. If the particular deployment uses only subset, e.g.
          // one, identifier type, this identifier should be only listed
          // here to prevent unnecessary queries to the database.
          "host-reservation-identifiers": [
            "hw-address",
            "duid",
            "circuit-id",
            "client-id",
            "flex-id"
          ],
          // As with any other configuration, you need to tell Kea the interface
          // names, so it would listen to incoming traffic.
          "interfaces-config": {
            "interfaces": [
              "*"
            ],
            "dhcp-socket-type": "udp",
            "outbound-interface": "use-routing",
            "re-detect": false
          },
          // Boolean parameter which controls DHCP server's behavior with respect
          // to creating host reservations for the same IP address. By default
          // this flag is set to true in which case the server prevents creation
          // of multiple host reservations for the same IP address. When this
          // parameter is set to false, the server allows for creating multiple
          // reservations for the same IP address within a subnet. This setting
          // is useful in deployments in which a given host may be communicating
          // with a DHCP server over multiple interfaces and depending on the
          // chosen interface different MAC address (or other identifier) will
          // be used to identify the host. Note that some host backends do not
          // support the mode in which multiple reservations for the same IP
          // address are used. If these backends are in use and this setting
          // is attempted a configuration error will occur. The MySQL and
          // PostgreSQL backends do support this mode.
          "ip-reservations-unique": true,

          "lease-database": {
            "type": "postgresql",
            "name": "hRCyPUlFYx",
            "host": "{{ .Hostname }}",
            "port": {{ .Port }},
            "user": "{{ .Username }}",

            "password": "{{ .Password }}",
            "reconnect-wait-time": 3000, // expressed in ms
            "max-reconnect-tries": 3,
            "on-fail": "stop-retry-exit",
            "connect-timeout": 3
          },
          "option-def": [
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "unifi-address",
              "code": 1,
              "space": "ubnt",
              "type": "ipv4-address"
            },
            /**
              * ONIE VIVSO
              */
            // TEST
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "installer_url",
              "code": 1,
              "space": "vendor-42623",
              "type": "string"
            },
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "updater_url",
              "code": 2,
              "space": "vendor-42623",
              "type": "string"
            },
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "machine",
              "code": 3,
              "space": "vendor-42623",
              "type": "string"
            },
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "arch",
              "code": 4,
              "space": "vendor-42623",
              "type": "string"
            },
            {
              // We define a short name, so the option can be referenced by name.
              // The option has code 2 and resides within vendor space 25167.
              // Its data is a plain string.
              "name": "machine_rev",
              "code": 5,
              "space": "vendor-42623",
              "type": "string"
            },
            {
              "name": "PXEDiscoveryControl",
              "code": 6,
              "space": "vendor-encapsulated-options-space",
              "type": "uint8",
              "array": false
            },
            {
              "name": "PXEMenuPrompt",
              "code": 10,
              "space": "vendor-encapsulated-options-space",
              "type": "record",
              "array": false,
              "record-types": "uint8,string"
            },
            {
              "name": "PXEBootMenu",
              "code": 9,
              "space": "vendor-encapsulated-options-space",
              "type": "record",
              "array": false,
              "record-types": "uint16,uint8,string"
            },

            // iPXE option space
            {
              "space": "dhcp4",
              "name": "ipxe-encap-opts",
              "code": 175,
              "type": "empty",
              "encapsulate": "ipxe"
            },

            // iPXE options, can be set in DHCP response packet
            {
              "space": "ipxe",
              "name": "priority",
              "code": 1,
              "type": "int8"
            },
            {
              "space": "ipxe",
              "name": "keep-san",
              "code": 8,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "skip-san-boot",
              "code": 9,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "syslogs",
              "code": 85,
              "type": "string"
            },
            {
              "space": "ipxe",
              "name": "cert",
              "code": 91,
              "type": "string"
            },
            {
              "space": "ipxe",
              "name": "privkey",
              "code": 92,
              "type": "string"
            },
            {
              "space": "ipxe",
              "name": "crosscert",
              "code": 93,
              "type": "string"
            },
            {
              "space": "ipxe",
              "name": "no-pxedhcp",
              "code": 176,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "bus-id",
              "code": 177,
              "type": "string"
            },
            {
              "space": "ipxe",
              "name": "san-filename",
              "code": 188,
              "type": "string"
            },
            {
              "space": "ipxe",
              "name": "bios-drive",
              "code": 189,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "username",
              "code": 190,
              "type": "string"
            },
            {
              "space": "ipxe",
              "name": "password",
              "code": 191,
              "type": "string"
            },
            {
              "space": "ipxe",
              "name": "reverse-username",
              "code": 192,
              "type": "string"
            },
            {
              "space": "ipxe",
              "name": "reverse-password",
              "code": 193,
              "type": "string"
            },
            {
              "space": "ipxe",
              "name": "version",
              "code": 235,
              "type": "string"
            },
            {
              "space": "dhcp4",
              "name": "iscsi-initiator-iqn",
              "code": 203,
              "type": "string"
            },

            // iPXE feature flags, set in DHCP request packet
            {
              "space": "ipxe",
              "name": "pxeext",
              "code": 16,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "iscsi",
              "code": 17,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "aoe",
              "code": 18,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "http",
              "code": 19,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "https",
              "code": 20,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "tftp",
              "code": 21,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "ftp",
              "code": 22,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "dns",
              "code": 23,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "bzimage",
              "code": 24,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "multiboot",
              "code": 25,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "slam",
              "code": 26,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "srp",
              "code": 27,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "nbi",
              "code": 32,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "pxe",
              "code": 33,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "elf",
              "code": 34,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "comboot",
              "code": 35,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "efi",
              "code": 36,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "fcoe",
              "code": 37,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "vlan",
              "code": 38,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "menu",
              "code": 39,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "sdi",
              "code": 40,
              "type": "uint8"
            },
            {
              "space": "ipxe",
              "name": "nfs",
              "code": 41,
              "type": "uint8"
            }
          ],
          // Global value for the rebind timer, i.e. the time after which the
          // DHCP client enters rebind state if it fails to renew the lease.
          "rebind-timer": 40,
          // Global value for the renew timer, i.e. the timer after which the
          // DHCP client renews the lease.
          "renew-timer": 30,
          // Global value to store extended information (e.g. relay agent
          // information) with each lease.
          "store-extended-info": true,
          // Statistics keep some samples per observation point.
          // There are two default values: maximum count and maximum age.
          // Set the maximum count to zero disables it.
          "statistic-default-sample-count": 0,
          // When the maximum count is 0 the maximum age (in seconds) applies.
          "statistic-default-sample-age": 60,
          // Multi-threading parameters.
          "multi-threading": {
            // By default Kea processes packets on a single thread (default
            // 'false' value for this option). To enable multi-threading, this
            // option can be set ('true' value).
            "enable-multi-threading": true,
            // When multi-threading is enabled, Kea will process packets on a
            // number of multiple threads configurable through this option. The
            // value must be a positive integer (0 means auto detect).
            "thread-pool-size": 8,
            // When multi-threading is enabled, Kea will read packets from the
            // interface and append a working item to the thread pool. This
            // option configures the maximum number of items that can be queued.
            // The value must be a positive integer (0 means unlimited).
            "packet-queue-size": 88
          },
          // Governs how the Kea DHCPv4 server should deal with the invalid
          // data received from the client.
          "sanity-checks": {
            // Specifies how the Kea DHCPv4 server should behave when invalid
            // data is read for a lease from the lease file. The following
            // values are supported "none" (don't attempt to correct the
            // lease information), "warn" (print a warning for subnet-id
            // related inconsistencies), "fix" (correct the subnet id by
            // trying to find the suitable subnet), "fix-del" (similar
            // to "fix" but delete the lease if no suitable subnet found),
            // "del" (delete the lease if the lease has invalid subnet
            // identifier value).
            "lease-checks": "warn"
          },
          // The shared networks definition starts here. shared-networks can
          // contain a list of shared networks. There are many parameters
          // that can be specified here, so this example may be overwhelming
          // at first, but the only mandatory parameter for each shared
          // network is name. It must be unique. Typically, each shared
          // network also needs to have at least two subnets to be functional,
          // but if you really want to, you can define a degraded shared
          // network that has 1 or even 0 subnets. This may come in handy
          // when migrating between regular subnets and shared networks
          // or when debugging a problem. It is not recommended to use
          // 1 subnet per shared network, as there is extra processing
          // overhead for shared networks.
          "shared-networks": [
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "spine0.home1.resolvemy.host",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "home1.resolvemy.host.",
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.31.192.1",
                  "172.31.192.2",
                  "192.168.2.1",
                  "192.168.2.2"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 195,
                  "match-client-id": false,
                  "server-hostname": "dhcp.resolvemy.host",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "1.1.1.1,1.0.0.1"
                    },
                    {
                      "name": "routers",
                      "data": "192.168.2.1"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "c8:e3:06:c0:af:a1",
                      "hostname": "eero",
                      "ip-address": "192.168.2.6"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "192.168.2.0/29",
                  "valid-lifetime": 3600
                },
                {
                  "id": 100,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "1.1.1.1,1.0.0.1"
                    },
                    {
                      "name": "routers",
                      "data": "172.31.192.2"
                    }
                  ],
                  "pools": [
                    {
                      "pool": "172.31.192.100 - 172.31.192.200"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "b8:ae:ed:79:5e:1d",
                      "hostname": "nuc1",
                      "ip-address": "172.31.192.11"
                    },
                    {
                      "hw-address": "74:d4:35:07:9e:d9",
                      "hostname": "hpc1",
                      "ip-address": "172.31.192.10"
                    },
                    {
                      "hw-address": "e0:d5:5e:65:02:d9",
                      "hostname": "hpc2",
                      "ip-address": "172.31.192.12"
                    },
                    {
                      "hw-address": "00:15:5d:f1:fc:01",
                      "hostname": "hpc2-vm",
                      "ip-address": "172.31.192.14"
                    },
                    {
                      "hw-address": "0e:fc:06:82:ee:4e",
                      "hostname": "hpc3",
                      "ip-address": "172.31.192.15"
                    },
                    {
                      "hw-address": "10:02:b5:86:17:65",
                      "hostname": "sbc2",
                      "ip-address": "172.31.192.13"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.31.192.0/24",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            {
              "authoritative": false,

              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "infra2.dc1.yxl.resolvemy.host",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "manage.resolvemy.host.",
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.16.20.254"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 200,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "1.1.1.1"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "1500"
                    },
                    {
                      "name": "routers",
                      "data": "172.16.20.254"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.16.20.0/24",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            {
              "authoritative": false,

              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "eth1.infra1.dc1.yxl.resolvemy.host",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "manage.resolvemy.host.",
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.31.241.73"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 110,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "1.1.1.1"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "9000"
                    },
                    {
                      "name": "routers",
                      "data": "172.31.241.73"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "f0:4d:a2:03:cd:e6",
                      "hostname": "infra1",
                      "ip-address": "172.31.241.74"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.31.241.72/30",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            {
              "authoritative": false,

              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "eth2.infra1.dc1.yxl.resolvemy.host",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "manage.resolvemy.host.",
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.31.241.73"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 111,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "1.1.1.1"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "9000"
                    },
                    {
                      "name": "routers",
                      "data": "172.31.241.77"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "f0:4d:a2:03:cd:ec",
                      "hostname": "infra1",
                      "ip-address": "172.31.241.78"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.31.241.76/30",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            {
              "authoritative": false,

              "name": "eth3.infra1.dc1.yxl.resolvemy.host",

              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "infra1.dc1.yxl.resolvemy.host.",

              "relay": {
                "ip-addresses": [
                  "172.31.241.81"
                ]
              },
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 112,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "1.1.1.1"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "9000"
                    },
                    {
                      "name": "routers",
                      "data": "172.31.241.81"
                    },
                    {
                      "name": "time-servers",
                      "data": "162.159.200.123"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "f0:4d:a2:03:cd:ea",
                      "hostname": "infra1",
                      "ip-address": "172.31.241.82"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.31.241.80/30",
                  "valid-lifetime": 3600
                },

              ],
              "valid-lifetime": 3600
            },
            {
              "authoritative": false,

              "name": "eth4.infra1.dc1.yxl.resolvemy.host",

              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "infra1.dc1.yxl.resolvemy.host.",

              "relay": {
                "ip-addresses": [
                  "172.31.241.85"
                ]
              },
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 113,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "1.1.1.1"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "9000"
                    },
                    {
                      "name": "routers",
                      "data": "172.31.241.85"
                    },
                    {
                      "name": "time-servers",
                      "data": "162.159.200.123"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "f0:4d:a2:03:cd:e8",
                      "hostname": "infra1",
                      "ip-address": "172.31.241.86"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.31.241.84/30",
                  "valid-lifetime": 3600
                },

              ],
              "valid-lifetime": 3600
            },
            {
              "authoritative": false,

              "name": "eth1.infra2.dc1.yxl.resolvemy.host",

              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "infra2.dc1.yxl.resolvemy.host.",

              "relay": {
                "ip-addresses": [
                  "172.31.241.89",
                  "192.168.0.2",
                  "192.168.0.4",
                  "192.168.0.1"
                ]
              },
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 114,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "1.1.1.1"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "9000"
                    },
                    {
                      "name": "routers",
                      "data": "172.31.241.89"
                    },
                    {
                      "name": "time-servers",
                      "data": "162.159.200.123"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "f0:4d:a2:09:60:ba",
                      "hostname": "infra2",
                      "ip-address": "172.31.241.90"
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.31.241.88/30",
                  "valid-lifetime": 3600
                },

              ],
              "valid-lifetime": 3600
            },
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "idrac.infra2.dc1.yxl.resolvemy.host",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "node0.dc1.resolvemy.host.",
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.31.241.233"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 921,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "1.1.1.1,1.0.0.1"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "9000"
                    },
                    {
                      "name": "routers",
                      "data": "172.31.241.233"
                    }
                  ],
                  "pools": [
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "f0:4d:a2:09:60:c2",
                      "hostname": "idrac",
                      "ip-address": "172.31.241.234"
                    },
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.31.241.232/30",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "spine0.dc1.resolvemy.host",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "k0s.dc1.resolvemy.host.",
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.16.51.100"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 951,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "domain-name-servers",
                      "data": "172.18.0.10"
                    },
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "9000"
                    },
                    {
                      "name": "routers",
                      "data": "172.16.51.100"
                    }
                  ],
                  "pools": [
                    {
                      "pool": "172.16.51.200 - 172.16.51.250"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "00:50:56:81:1f:55",
                      "hostname": "node0",
                      "ip-address": "172.16.51.210",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:a3:a2",
                      "hostname": "node1",
                      "ip-address": "172.16.51.211",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:bb:4e",
                      "hostname": "node2",
                      "ip-address": "172.16.51.212",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:fd:6a",
                      "hostname": "node3",
                      "ip-address": "172.16.51.213",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:33:7b",
                      "hostname": "node4",
                      "ip-address": "172.16.51.214",
                      "client-classes": [
                        "boots"
                      ]
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.16.51.0/24",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "spine1.dc1.resolvemy.host",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "k0s.dc1.resolvemy.host.",
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.16.52.100"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 952,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "9000"
                    },
                    {
                      "name": "routers",
                      "data": "172.16.52.100"
                    }
                  ],
                  "pools": [
                    {
                      "pool": "172.16.52.200 - 172.16.52.250"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "00:50:56:81:a6:22",
                      "hostname": "node0",
                      "ip-address": "172.16.52.210",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:44:e0",
                      "hostname": "node1",
                      "ip-address": "172.16.52.211",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:0a:28",
                      "hostname": "node2",
                      "ip-address": "172.16.52.212",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:ba:c4",
                      "hostname": "node3",
                      "ip-address": "172.16.52.213",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:68:83",
                      "hostname": "node4",
                      "ip-address": "172.16.52.214",
                      "client-classes": [
                        "boots"
                      ]
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.16.52.0/24",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "spine2.dc1.resolvemy.host",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "k0s.dc1.resolvemy.host.",
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.16.53.100"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 953,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "9000"
                    },
                    {
                      "name": "routers",
                      "data": "172.16.53.100"
                    }
                  ],
                  "pools": [
                    {
                      "pool": "172.16.53.200 - 172.16.53.250"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "00:50:56:81:a7:05",
                      "hostname": "node0",
                      "ip-address": "172.16.53.210",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:02:29",
                      "hostname": "node1",
                      "ip-address": "172.16.53.211",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:07:d5",
                      "hostname": "node2",
                      "ip-address": "172.16.53.212",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:5d:10",
                      "hostname": "node3",
                      "ip-address": "172.16.53.213",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:65:f1",
                      "hostname": "node4",
                      "ip-address": "172.16.53.214",
                      "client-classes": [
                        "boots"
                      ]
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.16.53.0/24",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            },
            {
              // Shared network level authoritative flag.
              "authoritative": false,
              // Name of the shared network. It may be an arbitrary string
              // and it must be unique among all shared networks.
              "name": "spine3.dc1.resolvemy.host",
              // You may specify interface name if the shared network is
              // reachable directly from the server.
              // You can specify many parameters that are allowed in subnet scope
              // here. It's useful to put them here if they apply to all subnets
              // in this shared network. It's likely that the most common
              // parameter here will be option values defined with option-data.
              "match-client-id": false,
              "option-data": [],
              "rebind-timer": 10800,

              "ddns-qualifying-suffix": "k0s.dc1.resolvemy.host.",
              // If all the traffic coming from that shared network is reachable
              // via relay and that relay always use the same IP address, you
              // can specify that relay address here. Since this example shows
              // a shared network reachable directly, we put 0.0.0.0 here.
              // It would be better to skip the relay scope altogether, but
              // it was left here for demonstration purposes.
              "relay": {
                "ip-addresses": [
                  "172.16.54.100"
                ]
              },
              // Timer values can be overridden here.
              "renew-timer": 1800,

              "store-extended-info": true,
              "subnet4": [
                {
                  "id": 954,
                  "match-client-id": false,
                  "server-hostname": "dhcp.service.kjdev",
                  "option-data": [
                    {
                      "name": "pcode",
                      "data": "CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00"
                    },
                    {
                      "name": "tcode",
                      "data": "America/Winnipeg"
                    },
                    {
                      "name": "interface-mtu",
                      "data": "9000"
                    },
                    {
                      "name": "routers",
                      "data": "172.16.54.100"
                    }
                  ],
                  "pools": [
                    {
                      "pool": "172.16.54.200 - 172.16.54.250"
                    }
                  ],
                  "rebind-timer": 10800,
                  "reservations": [
                    {
                      "hw-address": "00:50:56:81:2a:94",
                      "hostname": "node0",
                      "ip-address": "172.16.54.210",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:b0:a5",
                      "hostname": "node1",
                      "ip-address": "172.16.54.211",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:db:12",
                      "hostname": "node2",
                      "ip-address": "172.16.54.212",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:ce:e4",
                      "hostname": "node3",
                      "ip-address": "172.16.54.213",
                      "client-classes": [
                        "boots"
                      ]
                    },
                    {
                      "hw-address": "00:50:56:81:1f:45",
                      "hostname": "node4",
                      "ip-address": "172.16.54.214",
                      "client-classes": [
                        "boots"
                      ]
                    }
                  ],
                  "renew-timer": 1800,
                  "subnet": "172.16.54.0/24",
                  "valid-lifetime": 3600
                }
              ],
              "valid-lifetime": 3600
            }
          ], // end of shared-networks
          "server-hostname": "core0.site1.kristianjones.dev",
          // List of IPv4 subnets which don't belong to any shared network.
          "subnet4": [],
          // Global valid (default) lifetime value.
          "valid-lifetime": 1800,
          // Global min valid lifetime value.
          "min-valid-lifetime": 900,
          // Global max valid lifetime value.
          "max-valid-lifetime": 43200,
          // Reservations (examples are in other files).
          "reservations": [],
          // DHCP queue control parameters.
          "dhcp-queue-control": {
            // Enable queue is mandatory.
            "enable-queue": true,
            // Queue type was mandatory.
            "queue-type": "kea-ring4",
            // Capacity is optional.
            "capacity": 64
          },
          // The following configures logging. It assumes that messages with at
          // least informational level (info, warn, error and fatal) should be
          // logged to stdout.
          "loggers": [
            {
              "name": "kea-dhcp4",
              "output_options": [
                {
                  "output": "stdout"
                }
              ],
              "severity": "DEBUG",
              "debuglevel": 99
            }
          ]
        } // end of Dhcp4
      }

    `}}
{{- end -}}
