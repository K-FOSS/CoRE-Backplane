apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: core-backplane-storage-db-operator
  namespace: argocd

  labels:
    resolvemy.host/env: 'prod'

  annotations:
    argocd.argoproj.io/sync-wave: '0'
spec:
  goTemplate: true

  goTemplateOptions:
    - 'missingkey=error'

  generators:
    - clusters:
        selector:
          matchLabels:
            mylogin.space/tenant: 'core.mylogin.space'
        values:
          clusterName: '{{ .name }}'
          environment: '{{ index .metadata.labels "resolvemy.host/env" }}'
          clusterDomain: '{{ index .metadata.labels "cluster.kubernetes.io/domain" }}'
          tenant: '{{ index .metadata.labels "mylogin.space/tenant" }}'
          datacenter: '{{ index .metadata.labels "resolvemy.host/dc" }}'
          domain: 'consul.{{ index .metadata.labels "resolvemy.host/dc" }}.resolvemy.host'
          replicas: '1'


  template:
    metadata:
      name: '{{ .values.clusterName }}-db-operator'

      annotations:
        argocd.argoproj.io/manifest-generate-paths: .

    spec:
      project: core

      syncPolicy:
        syncOptions:
          - RespectIgnoreDifferences=true

      source:
        path: Databases/Operator
        repoURL: https://github.com/K-FOSS/CoRE-Backplane.git
        targetRevision: HEAD
        plugin:
          name: argocd-lovely-plugin
          env:
            - name: LOVELY_HELM_MERGE
              value: |- # yaml
                postgres-operator:
                  configKubernetes:
                    cluster_domain: {{ .values.clusterDomain }}

                  controllerID:
                    # Specifies whether a controller ID should be defined for the operator
                    # Note, all postgres manifest must then contain the following annotation to be found by this operator
                    # "acid.zalan.do/controller": <controller-ID-of-the-operator>
                    create: true
                    # The name of the controller ID to use.
                    # If not set and create is true, a name is generated using the fullname template
                    name: psql.{{ .values.tenant }}/{{ .values.environment }}


      destination:
        server: '{{ .server }}'
        namespace: core-{{ .values.environment }}